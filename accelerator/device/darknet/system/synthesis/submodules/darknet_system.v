// (C) 1992-2018 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 18.1.0 Build 625 Standard Edition, Copyright (C) 2018 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE darknet_system
/////////////////////////////////////////////////////////////////
module darknet_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_batchnorm_cra
   input logic avs_batchnorm_cra_enable,
   input logic avs_batchnorm_cra_read,
   input logic avs_batchnorm_cra_write,
   input logic [4:0] avs_batchnorm_cra_address,
   input logic [63:0] avs_batchnorm_cra_writedata,
   input logic [7:0] avs_batchnorm_cra_byteenable,
   output logic [63:0] avs_batchnorm_cra_readdata,
   output logic avs_batchnorm_cra_readdatavalid,
   // AVS avs_conv_cra
   input logic avs_conv_cra_enable,
   input logic avs_conv_cra_read,
   input logic avs_conv_cra_write,
   input logic [4:0] avs_conv_cra_address,
   input logic [63:0] avs_conv_cra_writedata,
   input logic [7:0] avs_conv_cra_byteenable,
   output logic [63:0] avs_conv_cra_readdata,
   output logic avs_conv_cra_readdatavalid,
   // AVS avs_conv1x1_cra
   input logic avs_conv1x1_cra_enable,
   input logic avs_conv1x1_cra_read,
   input logic avs_conv1x1_cra_write,
   input logic [4:0] avs_conv1x1_cra_address,
   input logic [63:0] avs_conv1x1_cra_writedata,
   input logic [7:0] avs_conv1x1_cra_byteenable,
   output logic [63:0] avs_conv1x1_cra_readdata,
   output logic avs_conv1x1_cra_readdatavalid,
   // AVS avs_pool_cra
   input logic avs_pool_cra_enable,
   input logic avs_pool_cra_read,
   input logic avs_pool_cra_write,
   input logic [4:0] avs_pool_cra_address,
   input logic [63:0] avs_pool_cra_writedata,
   input logic [7:0] avs_pool_cra_byteenable,
   output logic [63:0] avs_pool_cra_readdata,
   output logic avs_pool_cra_readdatavalid,
   output logic kernel_irq,
   // AVM avm_memgmem0_port_0_0_rw
   output logic avm_memgmem0_port_0_0_rw_enable,
   output logic avm_memgmem0_port_0_0_rw_read,
   output logic avm_memgmem0_port_0_0_rw_write,
   output logic [4:0] avm_memgmem0_port_0_0_rw_burstcount,
   output logic [29:0] avm_memgmem0_port_0_0_rw_address,
   output logic [255:0] avm_memgmem0_port_0_0_rw_writedata,
   output logic [31:0] avm_memgmem0_port_0_0_rw_byteenable,
   input logic avm_memgmem0_port_0_0_rw_waitrequest,
   input logic [255:0] avm_memgmem0_port_0_0_rw_readdata,
   input logic avm_memgmem0_port_0_0_rw_readdatavalid,
   input logic avm_memgmem0_port_0_0_rw_writeack
);
   logic [3:0] kernel_irqs;
   logic avm_kernel_rd_enable [16];
   logic avm_kernel_rd_read [16];
   logic avm_kernel_rd_write [16];
   logic [4:0] avm_kernel_rd_burstcount [16];
   logic [29:0] avm_kernel_rd_address [16];
   logic [255:0] avm_kernel_rd_writedata [16];
   logic [31:0] avm_kernel_rd_byteenable [16];
   logic avm_kernel_rd_waitrequest [16];
   logic [255:0] avm_kernel_rd_readdata [16];
   logic avm_kernel_rd_readdatavalid [16];
   logic avm_kernel_rd_writeack [16];
   logic avm_kernel_wr_enable [7];
   logic avm_kernel_wr_read [7];
   logic avm_kernel_wr_write [7];
   logic [4:0] avm_kernel_wr_burstcount [7];
   logic [29:0] avm_kernel_wr_address [7];
   logic [255:0] avm_kernel_wr_writedata [7];
   logic [31:0] avm_kernel_wr_byteenable [7];
   logic avm_kernel_wr_waitrequest [7];
   logic [255:0] avm_kernel_wr_readdata [7];
   logic avm_kernel_wr_readdatavalid [7];
   logic avm_kernel_wr_writeack [7];
   logic ic_avm_enable [1];
   logic ic_avm_read [1];
   logic ic_avm_write [1];
   logic [4:0] ic_avm_burstcount [1];
   logic [29:0] ic_avm_address [1];
   logic [255:0] ic_avm_writedata [1];
   logic [31:0] ic_avm_byteenable [1];
   logic ic_avm_waitrequest [1];
   logic [255:0] ic_avm_readdata [1];
   logic ic_avm_readdatavalid [1];
   logic ic_avm_writeack [1];

   // INST batchnorm_std_ic_inst of batchnorm_std_ic_partition_wrapper
   batchnorm_std_ic_partition_wrapper batchnorm_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_batchnorm(kernel_irqs[0]),
      // AVS avs_batchnorm_cra
      .avs_batchnorm_cra_enable(avs_batchnorm_cra_enable),
      .avs_batchnorm_cra_read(avs_batchnorm_cra_read),
      .avs_batchnorm_cra_write(avs_batchnorm_cra_write),
      .avs_batchnorm_cra_address(avs_batchnorm_cra_address),
      .avs_batchnorm_cra_writedata(avs_batchnorm_cra_writedata),
      .avs_batchnorm_cra_byteenable(avs_batchnorm_cra_byteenable),
      .avs_batchnorm_cra_readdata(avs_batchnorm_cra_readdata),
      .avs_batchnorm_cra_readdatavalid(avs_batchnorm_cra_readdatavalid),
      // AVM batchnorm_0_avm_unnamed_batchnorm0
      .batchnorm_0_avm_unnamed_batchnorm0_enable(avm_kernel_rd_enable[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_read(avm_kernel_rd_read[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_write(avm_kernel_rd_write[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_burstcount(avm_kernel_rd_burstcount[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_address(avm_kernel_rd_address[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_writedata(avm_kernel_rd_writedata[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_byteenable(avm_kernel_rd_byteenable[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_waitrequest(avm_kernel_rd_waitrequest[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_readdata(avm_kernel_rd_readdata[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_readdatavalid(avm_kernel_rd_readdatavalid[0]),
      .batchnorm_0_avm_unnamed_batchnorm0_writeack(avm_kernel_rd_writeack[0]),
      // AVM batchnorm_0_avm_unnamed_batchnorm1
      .batchnorm_0_avm_unnamed_batchnorm1_enable(avm_kernel_rd_enable[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_read(avm_kernel_rd_read[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_write(avm_kernel_rd_write[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_burstcount(avm_kernel_rd_burstcount[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_address(avm_kernel_rd_address[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_writedata(avm_kernel_rd_writedata[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_byteenable(avm_kernel_rd_byteenable[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_waitrequest(avm_kernel_rd_waitrequest[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_readdata(avm_kernel_rd_readdata[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_readdatavalid(avm_kernel_rd_readdatavalid[1]),
      .batchnorm_0_avm_unnamed_batchnorm1_writeack(avm_kernel_rd_writeack[1]),
      // AVM batchnorm_0_avm_unnamed_batchnorm2
      .batchnorm_0_avm_unnamed_batchnorm2_enable(avm_kernel_rd_enable[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_read(avm_kernel_rd_read[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_write(avm_kernel_rd_write[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_burstcount(avm_kernel_rd_burstcount[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_address(avm_kernel_rd_address[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_writedata(avm_kernel_rd_writedata[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_byteenable(avm_kernel_rd_byteenable[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_waitrequest(avm_kernel_rd_waitrequest[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_readdata(avm_kernel_rd_readdata[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_readdatavalid(avm_kernel_rd_readdatavalid[2]),
      .batchnorm_0_avm_unnamed_batchnorm2_writeack(avm_kernel_rd_writeack[2]),
      // AVM batchnorm_0_avm_unnamed_batchnorm3
      .batchnorm_0_avm_unnamed_batchnorm3_enable(avm_kernel_rd_enable[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_read(avm_kernel_rd_read[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_write(avm_kernel_rd_write[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_burstcount(avm_kernel_rd_burstcount[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_address(avm_kernel_rd_address[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_writedata(avm_kernel_rd_writedata[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_byteenable(avm_kernel_rd_byteenable[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_waitrequest(avm_kernel_rd_waitrequest[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_readdata(avm_kernel_rd_readdata[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_readdatavalid(avm_kernel_rd_readdatavalid[3]),
      .batchnorm_0_avm_unnamed_batchnorm3_writeack(avm_kernel_rd_writeack[3]),
      // AVM batchnorm_0_avm_unnamed_batchnorm4
      .batchnorm_0_avm_unnamed_batchnorm4_enable(avm_kernel_rd_enable[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_read(avm_kernel_rd_read[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_write(avm_kernel_rd_write[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_burstcount(avm_kernel_rd_burstcount[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_address(avm_kernel_rd_address[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_writedata(avm_kernel_rd_writedata[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_byteenable(avm_kernel_rd_byteenable[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_waitrequest(avm_kernel_rd_waitrequest[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_readdata(avm_kernel_rd_readdata[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_readdatavalid(avm_kernel_rd_readdatavalid[4]),
      .batchnorm_0_avm_unnamed_batchnorm4_writeack(avm_kernel_rd_writeack[4]),
      // AVM batchnorm_0_avm_unnamed_batchnorm5
      .batchnorm_0_avm_unnamed_batchnorm5_enable(avm_kernel_wr_enable[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_read(avm_kernel_wr_read[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_write(avm_kernel_wr_write[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_burstcount(avm_kernel_wr_burstcount[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_address(avm_kernel_wr_address[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_writedata(avm_kernel_wr_writedata[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_byteenable(avm_kernel_wr_byteenable[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_waitrequest(avm_kernel_wr_waitrequest[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_readdata(avm_kernel_wr_readdata[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_readdatavalid(avm_kernel_wr_readdatavalid[0]),
      .batchnorm_0_avm_unnamed_batchnorm5_writeack(avm_kernel_wr_writeack[0])
   );

   // INST conv_std_ic_inst of conv_std_ic_partition_wrapper
   conv_std_ic_partition_wrapper conv_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_conv(kernel_irqs[1]),
      // AVS avs_conv_cra
      .avs_conv_cra_enable(avs_conv_cra_enable),
      .avs_conv_cra_read(avs_conv_cra_read),
      .avs_conv_cra_write(avs_conv_cra_write),
      .avs_conv_cra_address(avs_conv_cra_address),
      .avs_conv_cra_writedata(avs_conv_cra_writedata),
      .avs_conv_cra_byteenable(avs_conv_cra_byteenable),
      .avs_conv_cra_readdata(avs_conv_cra_readdata),
      .avs_conv_cra_readdatavalid(avs_conv_cra_readdatavalid),
      // AVM conv_0_avm_unnamed_conv0
      .conv_0_avm_unnamed_conv0_enable(avm_kernel_rd_enable[5]),
      .conv_0_avm_unnamed_conv0_read(avm_kernel_rd_read[5]),
      .conv_0_avm_unnamed_conv0_write(avm_kernel_rd_write[5]),
      .conv_0_avm_unnamed_conv0_burstcount(avm_kernel_rd_burstcount[5]),
      .conv_0_avm_unnamed_conv0_address(avm_kernel_rd_address[5]),
      .conv_0_avm_unnamed_conv0_writedata(avm_kernel_rd_writedata[5]),
      .conv_0_avm_unnamed_conv0_byteenable(avm_kernel_rd_byteenable[5]),
      .conv_0_avm_unnamed_conv0_waitrequest(avm_kernel_rd_waitrequest[5]),
      .conv_0_avm_unnamed_conv0_readdata(avm_kernel_rd_readdata[5]),
      .conv_0_avm_unnamed_conv0_readdatavalid(avm_kernel_rd_readdatavalid[5]),
      .conv_0_avm_unnamed_conv0_writeack(avm_kernel_rd_writeack[5]),
      // AVM conv_0_avm_unnamed_conv1
      .conv_0_avm_unnamed_conv1_enable(avm_kernel_rd_enable[6]),
      .conv_0_avm_unnamed_conv1_read(avm_kernel_rd_read[6]),
      .conv_0_avm_unnamed_conv1_write(avm_kernel_rd_write[6]),
      .conv_0_avm_unnamed_conv1_burstcount(avm_kernel_rd_burstcount[6]),
      .conv_0_avm_unnamed_conv1_address(avm_kernel_rd_address[6]),
      .conv_0_avm_unnamed_conv1_writedata(avm_kernel_rd_writedata[6]),
      .conv_0_avm_unnamed_conv1_byteenable(avm_kernel_rd_byteenable[6]),
      .conv_0_avm_unnamed_conv1_waitrequest(avm_kernel_rd_waitrequest[6]),
      .conv_0_avm_unnamed_conv1_readdata(avm_kernel_rd_readdata[6]),
      .conv_0_avm_unnamed_conv1_readdatavalid(avm_kernel_rd_readdatavalid[6]),
      .conv_0_avm_unnamed_conv1_writeack(avm_kernel_rd_writeack[6]),
      // AVM conv_0_avm_unnamed_conv7
      .conv_0_avm_unnamed_conv7_enable(avm_kernel_wr_enable[1]),
      .conv_0_avm_unnamed_conv7_read(avm_kernel_wr_read[1]),
      .conv_0_avm_unnamed_conv7_write(avm_kernel_wr_write[1]),
      .conv_0_avm_unnamed_conv7_burstcount(avm_kernel_wr_burstcount[1]),
      .conv_0_avm_unnamed_conv7_address(avm_kernel_wr_address[1]),
      .conv_0_avm_unnamed_conv7_writedata(avm_kernel_wr_writedata[1]),
      .conv_0_avm_unnamed_conv7_byteenable(avm_kernel_wr_byteenable[1]),
      .conv_0_avm_unnamed_conv7_waitrequest(avm_kernel_wr_waitrequest[1]),
      .conv_0_avm_unnamed_conv7_readdata(avm_kernel_wr_readdata[1]),
      .conv_0_avm_unnamed_conv7_readdatavalid(avm_kernel_wr_readdatavalid[1]),
      .conv_0_avm_unnamed_conv7_writeack(avm_kernel_wr_writeack[1])
   );

   // INST conv1x1_std_ic_inst of conv1x1_std_ic_partition_wrapper
   conv1x1_std_ic_partition_wrapper conv1x1_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_conv1x1(kernel_irqs[2]),
      // AVS avs_conv1x1_cra
      .avs_conv1x1_cra_enable(avs_conv1x1_cra_enable),
      .avs_conv1x1_cra_read(avs_conv1x1_cra_read),
      .avs_conv1x1_cra_write(avs_conv1x1_cra_write),
      .avs_conv1x1_cra_address(avs_conv1x1_cra_address),
      .avs_conv1x1_cra_writedata(avs_conv1x1_cra_writedata),
      .avs_conv1x1_cra_byteenable(avs_conv1x1_cra_byteenable),
      .avs_conv1x1_cra_readdata(avs_conv1x1_cra_readdata),
      .avs_conv1x1_cra_readdatavalid(avs_conv1x1_cra_readdatavalid),
      // AVM conv1x1_0_avm_unnamed_conv1x11
      .conv1x1_0_avm_unnamed_conv1x11_enable(avm_kernel_rd_enable[7]),
      .conv1x1_0_avm_unnamed_conv1x11_read(avm_kernel_rd_read[7]),
      .conv1x1_0_avm_unnamed_conv1x11_write(avm_kernel_rd_write[7]),
      .conv1x1_0_avm_unnamed_conv1x11_burstcount(avm_kernel_rd_burstcount[7]),
      .conv1x1_0_avm_unnamed_conv1x11_address(avm_kernel_rd_address[7]),
      .conv1x1_0_avm_unnamed_conv1x11_writedata(avm_kernel_rd_writedata[7]),
      .conv1x1_0_avm_unnamed_conv1x11_byteenable(avm_kernel_rd_byteenable[7]),
      .conv1x1_0_avm_unnamed_conv1x11_waitrequest(avm_kernel_rd_waitrequest[7]),
      .conv1x1_0_avm_unnamed_conv1x11_readdata(avm_kernel_rd_readdata[7]),
      .conv1x1_0_avm_unnamed_conv1x11_readdatavalid(avm_kernel_rd_readdatavalid[7]),
      .conv1x1_0_avm_unnamed_conv1x11_writeack(avm_kernel_rd_writeack[7]),
      // AVM conv1x1_0_avm_unnamed_conv1x110
      .conv1x1_0_avm_unnamed_conv1x110_enable(avm_kernel_rd_enable[8]),
      .conv1x1_0_avm_unnamed_conv1x110_read(avm_kernel_rd_read[8]),
      .conv1x1_0_avm_unnamed_conv1x110_write(avm_kernel_rd_write[8]),
      .conv1x1_0_avm_unnamed_conv1x110_burstcount(avm_kernel_rd_burstcount[8]),
      .conv1x1_0_avm_unnamed_conv1x110_address(avm_kernel_rd_address[8]),
      .conv1x1_0_avm_unnamed_conv1x110_writedata(avm_kernel_rd_writedata[8]),
      .conv1x1_0_avm_unnamed_conv1x110_byteenable(avm_kernel_rd_byteenable[8]),
      .conv1x1_0_avm_unnamed_conv1x110_waitrequest(avm_kernel_rd_waitrequest[8]),
      .conv1x1_0_avm_unnamed_conv1x110_readdata(avm_kernel_rd_readdata[8]),
      .conv1x1_0_avm_unnamed_conv1x110_readdatavalid(avm_kernel_rd_readdatavalid[8]),
      .conv1x1_0_avm_unnamed_conv1x110_writeack(avm_kernel_rd_writeack[8]),
      // AVM conv1x1_0_avm_unnamed_conv1x111
      .conv1x1_0_avm_unnamed_conv1x111_enable(avm_kernel_wr_enable[2]),
      .conv1x1_0_avm_unnamed_conv1x111_read(avm_kernel_wr_read[2]),
      .conv1x1_0_avm_unnamed_conv1x111_write(avm_kernel_wr_write[2]),
      .conv1x1_0_avm_unnamed_conv1x111_burstcount(avm_kernel_wr_burstcount[2]),
      .conv1x1_0_avm_unnamed_conv1x111_address(avm_kernel_wr_address[2]),
      .conv1x1_0_avm_unnamed_conv1x111_writedata(avm_kernel_wr_writedata[2]),
      .conv1x1_0_avm_unnamed_conv1x111_byteenable(avm_kernel_wr_byteenable[2]),
      .conv1x1_0_avm_unnamed_conv1x111_waitrequest(avm_kernel_wr_waitrequest[2]),
      .conv1x1_0_avm_unnamed_conv1x111_readdata(avm_kernel_wr_readdata[2]),
      .conv1x1_0_avm_unnamed_conv1x111_readdatavalid(avm_kernel_wr_readdatavalid[2]),
      .conv1x1_0_avm_unnamed_conv1x111_writeack(avm_kernel_wr_writeack[2]),
      // AVM conv1x1_0_avm_unnamed_conv1x113
      .conv1x1_0_avm_unnamed_conv1x113_enable(avm_kernel_rd_enable[9]),
      .conv1x1_0_avm_unnamed_conv1x113_read(avm_kernel_rd_read[9]),
      .conv1x1_0_avm_unnamed_conv1x113_write(avm_kernel_rd_write[9]),
      .conv1x1_0_avm_unnamed_conv1x113_burstcount(avm_kernel_rd_burstcount[9]),
      .conv1x1_0_avm_unnamed_conv1x113_address(avm_kernel_rd_address[9]),
      .conv1x1_0_avm_unnamed_conv1x113_writedata(avm_kernel_rd_writedata[9]),
      .conv1x1_0_avm_unnamed_conv1x113_byteenable(avm_kernel_rd_byteenable[9]),
      .conv1x1_0_avm_unnamed_conv1x113_waitrequest(avm_kernel_rd_waitrequest[9]),
      .conv1x1_0_avm_unnamed_conv1x113_readdata(avm_kernel_rd_readdata[9]),
      .conv1x1_0_avm_unnamed_conv1x113_readdatavalid(avm_kernel_rd_readdatavalid[9]),
      .conv1x1_0_avm_unnamed_conv1x113_writeack(avm_kernel_rd_writeack[9]),
      // AVM conv1x1_0_avm_unnamed_conv1x114
      .conv1x1_0_avm_unnamed_conv1x114_enable(avm_kernel_rd_enable[10]),
      .conv1x1_0_avm_unnamed_conv1x114_read(avm_kernel_rd_read[10]),
      .conv1x1_0_avm_unnamed_conv1x114_write(avm_kernel_rd_write[10]),
      .conv1x1_0_avm_unnamed_conv1x114_burstcount(avm_kernel_rd_burstcount[10]),
      .conv1x1_0_avm_unnamed_conv1x114_address(avm_kernel_rd_address[10]),
      .conv1x1_0_avm_unnamed_conv1x114_writedata(avm_kernel_rd_writedata[10]),
      .conv1x1_0_avm_unnamed_conv1x114_byteenable(avm_kernel_rd_byteenable[10]),
      .conv1x1_0_avm_unnamed_conv1x114_waitrequest(avm_kernel_rd_waitrequest[10]),
      .conv1x1_0_avm_unnamed_conv1x114_readdata(avm_kernel_rd_readdata[10]),
      .conv1x1_0_avm_unnamed_conv1x114_readdatavalid(avm_kernel_rd_readdatavalid[10]),
      .conv1x1_0_avm_unnamed_conv1x114_writeack(avm_kernel_rd_writeack[10]),
      // AVM conv1x1_0_avm_unnamed_conv1x115
      .conv1x1_0_avm_unnamed_conv1x115_enable(avm_kernel_wr_enable[3]),
      .conv1x1_0_avm_unnamed_conv1x115_read(avm_kernel_wr_read[3]),
      .conv1x1_0_avm_unnamed_conv1x115_write(avm_kernel_wr_write[3]),
      .conv1x1_0_avm_unnamed_conv1x115_burstcount(avm_kernel_wr_burstcount[3]),
      .conv1x1_0_avm_unnamed_conv1x115_address(avm_kernel_wr_address[3]),
      .conv1x1_0_avm_unnamed_conv1x115_writedata(avm_kernel_wr_writedata[3]),
      .conv1x1_0_avm_unnamed_conv1x115_byteenable(avm_kernel_wr_byteenable[3]),
      .conv1x1_0_avm_unnamed_conv1x115_waitrequest(avm_kernel_wr_waitrequest[3]),
      .conv1x1_0_avm_unnamed_conv1x115_readdata(avm_kernel_wr_readdata[3]),
      .conv1x1_0_avm_unnamed_conv1x115_readdatavalid(avm_kernel_wr_readdatavalid[3]),
      .conv1x1_0_avm_unnamed_conv1x115_writeack(avm_kernel_wr_writeack[3]),
      // AVM conv1x1_0_avm_unnamed_conv1x12
      .conv1x1_0_avm_unnamed_conv1x12_enable(avm_kernel_rd_enable[11]),
      .conv1x1_0_avm_unnamed_conv1x12_read(avm_kernel_rd_read[11]),
      .conv1x1_0_avm_unnamed_conv1x12_write(avm_kernel_rd_write[11]),
      .conv1x1_0_avm_unnamed_conv1x12_burstcount(avm_kernel_rd_burstcount[11]),
      .conv1x1_0_avm_unnamed_conv1x12_address(avm_kernel_rd_address[11]),
      .conv1x1_0_avm_unnamed_conv1x12_writedata(avm_kernel_rd_writedata[11]),
      .conv1x1_0_avm_unnamed_conv1x12_byteenable(avm_kernel_rd_byteenable[11]),
      .conv1x1_0_avm_unnamed_conv1x12_waitrequest(avm_kernel_rd_waitrequest[11]),
      .conv1x1_0_avm_unnamed_conv1x12_readdata(avm_kernel_rd_readdata[11]),
      .conv1x1_0_avm_unnamed_conv1x12_readdatavalid(avm_kernel_rd_readdatavalid[11]),
      .conv1x1_0_avm_unnamed_conv1x12_writeack(avm_kernel_rd_writeack[11]),
      // AVM conv1x1_0_avm_unnamed_conv1x13
      .conv1x1_0_avm_unnamed_conv1x13_enable(avm_kernel_wr_enable[4]),
      .conv1x1_0_avm_unnamed_conv1x13_read(avm_kernel_wr_read[4]),
      .conv1x1_0_avm_unnamed_conv1x13_write(avm_kernel_wr_write[4]),
      .conv1x1_0_avm_unnamed_conv1x13_burstcount(avm_kernel_wr_burstcount[4]),
      .conv1x1_0_avm_unnamed_conv1x13_address(avm_kernel_wr_address[4]),
      .conv1x1_0_avm_unnamed_conv1x13_writedata(avm_kernel_wr_writedata[4]),
      .conv1x1_0_avm_unnamed_conv1x13_byteenable(avm_kernel_wr_byteenable[4]),
      .conv1x1_0_avm_unnamed_conv1x13_waitrequest(avm_kernel_wr_waitrequest[4]),
      .conv1x1_0_avm_unnamed_conv1x13_readdata(avm_kernel_wr_readdata[4]),
      .conv1x1_0_avm_unnamed_conv1x13_readdatavalid(avm_kernel_wr_readdatavalid[4]),
      .conv1x1_0_avm_unnamed_conv1x13_writeack(avm_kernel_wr_writeack[4]),
      // AVM conv1x1_0_avm_unnamed_conv1x15
      .conv1x1_0_avm_unnamed_conv1x15_enable(avm_kernel_rd_enable[12]),
      .conv1x1_0_avm_unnamed_conv1x15_read(avm_kernel_rd_read[12]),
      .conv1x1_0_avm_unnamed_conv1x15_write(avm_kernel_rd_write[12]),
      .conv1x1_0_avm_unnamed_conv1x15_burstcount(avm_kernel_rd_burstcount[12]),
      .conv1x1_0_avm_unnamed_conv1x15_address(avm_kernel_rd_address[12]),
      .conv1x1_0_avm_unnamed_conv1x15_writedata(avm_kernel_rd_writedata[12]),
      .conv1x1_0_avm_unnamed_conv1x15_byteenable(avm_kernel_rd_byteenable[12]),
      .conv1x1_0_avm_unnamed_conv1x15_waitrequest(avm_kernel_rd_waitrequest[12]),
      .conv1x1_0_avm_unnamed_conv1x15_readdata(avm_kernel_rd_readdata[12]),
      .conv1x1_0_avm_unnamed_conv1x15_readdatavalid(avm_kernel_rd_readdatavalid[12]),
      .conv1x1_0_avm_unnamed_conv1x15_writeack(avm_kernel_rd_writeack[12]),
      // AVM conv1x1_0_avm_unnamed_conv1x16
      .conv1x1_0_avm_unnamed_conv1x16_enable(avm_kernel_rd_enable[13]),
      .conv1x1_0_avm_unnamed_conv1x16_read(avm_kernel_rd_read[13]),
      .conv1x1_0_avm_unnamed_conv1x16_write(avm_kernel_rd_write[13]),
      .conv1x1_0_avm_unnamed_conv1x16_burstcount(avm_kernel_rd_burstcount[13]),
      .conv1x1_0_avm_unnamed_conv1x16_address(avm_kernel_rd_address[13]),
      .conv1x1_0_avm_unnamed_conv1x16_writedata(avm_kernel_rd_writedata[13]),
      .conv1x1_0_avm_unnamed_conv1x16_byteenable(avm_kernel_rd_byteenable[13]),
      .conv1x1_0_avm_unnamed_conv1x16_waitrequest(avm_kernel_rd_waitrequest[13]),
      .conv1x1_0_avm_unnamed_conv1x16_readdata(avm_kernel_rd_readdata[13]),
      .conv1x1_0_avm_unnamed_conv1x16_readdatavalid(avm_kernel_rd_readdatavalid[13]),
      .conv1x1_0_avm_unnamed_conv1x16_writeack(avm_kernel_rd_writeack[13]),
      // AVM conv1x1_0_avm_unnamed_conv1x17
      .conv1x1_0_avm_unnamed_conv1x17_enable(avm_kernel_wr_enable[5]),
      .conv1x1_0_avm_unnamed_conv1x17_read(avm_kernel_wr_read[5]),
      .conv1x1_0_avm_unnamed_conv1x17_write(avm_kernel_wr_write[5]),
      .conv1x1_0_avm_unnamed_conv1x17_burstcount(avm_kernel_wr_burstcount[5]),
      .conv1x1_0_avm_unnamed_conv1x17_address(avm_kernel_wr_address[5]),
      .conv1x1_0_avm_unnamed_conv1x17_writedata(avm_kernel_wr_writedata[5]),
      .conv1x1_0_avm_unnamed_conv1x17_byteenable(avm_kernel_wr_byteenable[5]),
      .conv1x1_0_avm_unnamed_conv1x17_waitrequest(avm_kernel_wr_waitrequest[5]),
      .conv1x1_0_avm_unnamed_conv1x17_readdata(avm_kernel_wr_readdata[5]),
      .conv1x1_0_avm_unnamed_conv1x17_readdatavalid(avm_kernel_wr_readdatavalid[5]),
      .conv1x1_0_avm_unnamed_conv1x17_writeack(avm_kernel_wr_writeack[5]),
      // AVM conv1x1_0_avm_unnamed_conv1x19
      .conv1x1_0_avm_unnamed_conv1x19_enable(avm_kernel_rd_enable[14]),
      .conv1x1_0_avm_unnamed_conv1x19_read(avm_kernel_rd_read[14]),
      .conv1x1_0_avm_unnamed_conv1x19_write(avm_kernel_rd_write[14]),
      .conv1x1_0_avm_unnamed_conv1x19_burstcount(avm_kernel_rd_burstcount[14]),
      .conv1x1_0_avm_unnamed_conv1x19_address(avm_kernel_rd_address[14]),
      .conv1x1_0_avm_unnamed_conv1x19_writedata(avm_kernel_rd_writedata[14]),
      .conv1x1_0_avm_unnamed_conv1x19_byteenable(avm_kernel_rd_byteenable[14]),
      .conv1x1_0_avm_unnamed_conv1x19_waitrequest(avm_kernel_rd_waitrequest[14]),
      .conv1x1_0_avm_unnamed_conv1x19_readdata(avm_kernel_rd_readdata[14]),
      .conv1x1_0_avm_unnamed_conv1x19_readdatavalid(avm_kernel_rd_readdatavalid[14]),
      .conv1x1_0_avm_unnamed_conv1x19_writeack(avm_kernel_rd_writeack[14])
   );

   // INST pool_std_ic_inst of pool_std_ic_partition_wrapper
   pool_std_ic_partition_wrapper pool_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_pool(kernel_irqs[3]),
      // AVS avs_pool_cra
      .avs_pool_cra_enable(avs_pool_cra_enable),
      .avs_pool_cra_read(avs_pool_cra_read),
      .avs_pool_cra_write(avs_pool_cra_write),
      .avs_pool_cra_address(avs_pool_cra_address),
      .avs_pool_cra_writedata(avs_pool_cra_writedata),
      .avs_pool_cra_byteenable(avs_pool_cra_byteenable),
      .avs_pool_cra_readdata(avs_pool_cra_readdata),
      .avs_pool_cra_readdatavalid(avs_pool_cra_readdatavalid),
      // AVM pool_0_avm_unnamed_pool3
      .pool_0_avm_unnamed_pool3_enable(avm_kernel_rd_enable[15]),
      .pool_0_avm_unnamed_pool3_read(avm_kernel_rd_read[15]),
      .pool_0_avm_unnamed_pool3_write(avm_kernel_rd_write[15]),
      .pool_0_avm_unnamed_pool3_burstcount(avm_kernel_rd_burstcount[15]),
      .pool_0_avm_unnamed_pool3_address(avm_kernel_rd_address[15]),
      .pool_0_avm_unnamed_pool3_writedata(avm_kernel_rd_writedata[15]),
      .pool_0_avm_unnamed_pool3_byteenable(avm_kernel_rd_byteenable[15]),
      .pool_0_avm_unnamed_pool3_waitrequest(avm_kernel_rd_waitrequest[15]),
      .pool_0_avm_unnamed_pool3_readdata(avm_kernel_rd_readdata[15]),
      .pool_0_avm_unnamed_pool3_readdatavalid(avm_kernel_rd_readdatavalid[15]),
      .pool_0_avm_unnamed_pool3_writeack(avm_kernel_rd_writeack[15]),
      // AVM pool_0_avm_unnamed_pool5
      .pool_0_avm_unnamed_pool5_enable(avm_kernel_wr_enable[6]),
      .pool_0_avm_unnamed_pool5_read(avm_kernel_wr_read[6]),
      .pool_0_avm_unnamed_pool5_write(avm_kernel_wr_write[6]),
      .pool_0_avm_unnamed_pool5_burstcount(avm_kernel_wr_burstcount[6]),
      .pool_0_avm_unnamed_pool5_address(avm_kernel_wr_address[6]),
      .pool_0_avm_unnamed_pool5_writedata(avm_kernel_wr_writedata[6]),
      .pool_0_avm_unnamed_pool5_byteenable(avm_kernel_wr_byteenable[6]),
      .pool_0_avm_unnamed_pool5_waitrequest(avm_kernel_wr_waitrequest[6]),
      .pool_0_avm_unnamed_pool5_readdata(avm_kernel_wr_readdata[6]),
      .pool_0_avm_unnamed_pool5_readdatavalid(avm_kernel_wr_readdatavalid[6]),
      .pool_0_avm_unnamed_pool5_writeack(avm_kernel_wr_writeack[6])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(30),
      .SHIFT(30),
      .MWIDTH_BYTES(32),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(16),
      .NUM_WR_PORT(7),
      .NUM_DIMM(1),
      .ENABLE_DUAL_RING(0),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .ENABLE_REORDER(0),
      .NUM_REORDER(1),
      .HIGH_FMAX(0)
   )
   lsu_ic_top
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(avm_kernel_rd_read),
      .i_rd_address(avm_kernel_rd_address),
      .i_rd_burstcount(avm_kernel_rd_burstcount),
      .i_wr_byteenable(avm_kernel_wr_byteenable),
      .i_wr_address(avm_kernel_wr_address),
      .i_wr_request(avm_kernel_wr_write),
      .i_wr_burstcount(avm_kernel_wr_burstcount),
      .i_wr_writedata(avm_kernel_wr_writedata),
      .i_avm_waitrequest(ic_avm_waitrequest),
      .i_avm_readdata(ic_avm_readdata),
      .i_avm_readdatavalid(ic_avm_readdatavalid),
      .o_avm_byteenable(ic_avm_byteenable),
      .o_avm_address(ic_avm_address),
      .o_avm_read(ic_avm_read),
      .o_avm_write(ic_avm_write),
      .o_avm_burstcount(ic_avm_burstcount),
      .o_wr_waitrequest(avm_kernel_wr_waitrequest),
      .o_avm_writedata(ic_avm_writedata),
      .o_avm_writeack(avm_kernel_wr_writeack),
      .o_rd_waitrequest(avm_kernel_rd_waitrequest),
      .o_avm_readdata(avm_kernel_rd_readdata),
      .o_avm_readdatavalid(avm_kernel_rd_readdatavalid)
   );

   assign avm_memgmem0_port_0_0_rw_read = ic_avm_read[0];
   assign avm_memgmem0_port_0_0_rw_write = ic_avm_write[0];
   assign avm_memgmem0_port_0_0_rw_burstcount = ic_avm_burstcount[0];
   assign avm_memgmem0_port_0_0_rw_address = ic_avm_address[0];
   assign avm_memgmem0_port_0_0_rw_writedata = ic_avm_writedata[0];
   assign avm_memgmem0_port_0_0_rw_byteenable = ic_avm_byteenable[0];
   assign ic_avm_waitrequest[0] = avm_memgmem0_port_0_0_rw_waitrequest;
   assign ic_avm_readdata[0] = avm_memgmem0_port_0_0_rw_readdata;
   assign ic_avm_readdatavalid[0] = avm_memgmem0_port_0_0_rw_readdatavalid;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE batchnorm_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module batchnorm_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_batchnorm,
   // AVS avs_batchnorm_cra
   input logic avs_batchnorm_cra_enable,
   input logic avs_batchnorm_cra_read,
   input logic avs_batchnorm_cra_write,
   input logic [4:0] avs_batchnorm_cra_address,
   input logic [63:0] avs_batchnorm_cra_writedata,
   input logic [7:0] avs_batchnorm_cra_byteenable,
   output logic [63:0] avs_batchnorm_cra_readdata,
   output logic avs_batchnorm_cra_readdatavalid,
   // AVM batchnorm_0_avm_unnamed_batchnorm0
   output logic batchnorm_0_avm_unnamed_batchnorm0_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm0_read,
   output logic batchnorm_0_avm_unnamed_batchnorm0_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm0_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm0_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm0_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm0_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm0_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm0_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm0_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm0_writeack,
   // AVM batchnorm_0_avm_unnamed_batchnorm1
   output logic batchnorm_0_avm_unnamed_batchnorm1_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm1_read,
   output logic batchnorm_0_avm_unnamed_batchnorm1_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm1_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm1_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm1_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm1_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm1_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm1_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm1_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm1_writeack,
   // AVM batchnorm_0_avm_unnamed_batchnorm2
   output logic batchnorm_0_avm_unnamed_batchnorm2_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm2_read,
   output logic batchnorm_0_avm_unnamed_batchnorm2_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm2_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm2_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm2_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm2_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm2_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm2_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm2_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm2_writeack,
   // AVM batchnorm_0_avm_unnamed_batchnorm3
   output logic batchnorm_0_avm_unnamed_batchnorm3_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm3_read,
   output logic batchnorm_0_avm_unnamed_batchnorm3_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm3_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm3_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm3_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm3_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm3_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm3_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm3_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm3_writeack,
   // AVM batchnorm_0_avm_unnamed_batchnorm4
   output logic batchnorm_0_avm_unnamed_batchnorm4_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm4_read,
   output logic batchnorm_0_avm_unnamed_batchnorm4_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm4_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm4_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm4_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm4_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm4_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm4_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm4_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm4_writeack,
   // AVM batchnorm_0_avm_unnamed_batchnorm5
   output logic batchnorm_0_avm_unnamed_batchnorm5_enable,
   output logic batchnorm_0_avm_unnamed_batchnorm5_read,
   output logic batchnorm_0_avm_unnamed_batchnorm5_write,
   output logic [4:0] batchnorm_0_avm_unnamed_batchnorm5_burstcount,
   output logic [29:0] batchnorm_0_avm_unnamed_batchnorm5_address,
   output logic [255:0] batchnorm_0_avm_unnamed_batchnorm5_writedata,
   output logic [31:0] batchnorm_0_avm_unnamed_batchnorm5_byteenable,
   input logic batchnorm_0_avm_unnamed_batchnorm5_waitrequest,
   input logic [255:0] batchnorm_0_avm_unnamed_batchnorm5_readdata,
   input logic batchnorm_0_avm_unnamed_batchnorm5_readdatavalid,
   input logic batchnorm_0_avm_unnamed_batchnorm5_writeack
);
   logic batchnorm_start;
   logic [0:0] batchnorm_start_chain;
   logic [0:0] batchnorm_start_kernel_copy;
   logic [0:0] batchnorm_start_task_fd;
   logic [0:0] batchnorm_start_finish_element;
   logic batchnorm_finish;
   logic [0:0] batchnorm_finish_kernel_copy;
   logic [0:0] batchnorm_finish_chain;
   logic [31:0] batchnorm_global_size [2:0];
   logic [31:0] batchnorm_num_groups [2:0];
   logic [31:0] batchnorm_local_size [2:0];
   logic [31:0] batchnorm_global_offset [2:0];
   logic [31:0] batchnorm_work_dim;
   logic [31:0] batchnorm_wg_size;
   logic [0:0] batchnorm_wg_disp_stall_in;
   logic [0:0] batchnorm_wg_disp_stall_in_lookahead;
   logic [0:0] batchnorm_wg_disp_valid_out;
   logic batchnorm_wg_disp_start_out;
   logic [31:0] batchnorm_wg_disp_group_id_out [2:0];
   logic [31:0] batchnorm_wg_disp_global_id_base_out [2:0];
   logic batchnorm_wg_disp_dispatched_all_groups;
   logic [31:0] batchnorm_global_id [1][2:0];
   logic [31:0] batchnorm_local_id [1][2:0];
   logic [31:0] batchnorm_group_id [1][2:0];
   logic [0:0] batchnorm_pending_write;
   logic [0:0] batchnorm_lsu_active;
   logic [0:0] batchnorm_valid_in;
   logic [0:0] batchnorm_valid_out;
   logic [0:0] batchnorm_stall_in;
   logic [0:0] batchnorm_stall_out;
   logic batchnorm_cra_pending_write;
   logic batchnorm_cra_lsu_active;
   logic batchnorm_cra_valid_in;
   logic [479:0] batchnorm_kernel_arguments;

   assign batchnorm_start_chain[0] = batchnorm_start;
   assign batchnorm_finish_chain[0] = 1'b1;
   assign batchnorm_cra_pending_write = |batchnorm_pending_write;
   assign batchnorm_cra_lsu_active = |batchnorm_lsu_active;
   assign batchnorm_cra_valid_in = |batchnorm_valid_in;
   assign batchnorm_stall_in = 0;
   // INST batchnorm_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   batchnorm_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(batchnorm_start),
      .num_groups(batchnorm_num_groups),
      .local_size(batchnorm_local_size),
      .stall_in(batchnorm_wg_disp_stall_in),
      .stall_in_lookahead(batchnorm_wg_disp_stall_in_lookahead),
      .valid_out(batchnorm_wg_disp_valid_out),
      .group_id_out(batchnorm_wg_disp_group_id_out),
      .global_id_base_out(batchnorm_wg_disp_global_id_base_out),
      .start_out(batchnorm_wg_disp_start_out),
      .dispatched_all_groups(batchnorm_wg_disp_dispatched_all_groups)
   );

   // INST batchnorm_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   batchnorm_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(batchnorm_start),
      .wg_size(batchnorm_wg_size),
      .wg_dispatch_valid_out(batchnorm_wg_disp_valid_out),
      .wg_dispatch_stall_in(batchnorm_wg_disp_stall_in),
      .dispatched_all_groups(batchnorm_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(batchnorm_valid_out),
      .kernel_copy_stall_in(batchnorm_stall_in),
      .pending_writes(batchnorm_cra_pending_write),
      .finish(batchnorm_finish)
   );

   // INST batchnorm_cra_slave_inst of batchnorm_function_cra_slave
   batchnorm_function_cra_slave batchnorm_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(batchnorm_start),
      .finish(batchnorm_finish),
      .global_offset_0(batchnorm_global_offset[0]),
      .global_offset_1(batchnorm_global_offset[1]),
      .global_offset_2(batchnorm_global_offset[2]),
      .work_dim(batchnorm_work_dim),
      .has_a_lsu_active(batchnorm_cra_lsu_active),
      .has_a_write_pending(batchnorm_cra_pending_write),
      .valid_in(batchnorm_cra_valid_in),
      .global_size_0(batchnorm_global_size[0]),
      .global_size_1(batchnorm_global_size[1]),
      .global_size_2(batchnorm_global_size[2]),
      .num_groups_0(batchnorm_num_groups[0]),
      .num_groups_1(batchnorm_num_groups[1]),
      .num_groups_2(batchnorm_num_groups[2]),
      .local_size_0(batchnorm_local_size[0]),
      .local_size_1(batchnorm_local_size[1]),
      .local_size_2(batchnorm_local_size[2]),
      .workgroup_size(batchnorm_wg_size),
      .kernel_arguments(batchnorm_kernel_arguments),
      .cra_irq(cra_irq_batchnorm),
      // AVS avs_cra
      .avs_cra_enable(avs_batchnorm_cra_enable),
      .avs_cra_read(avs_batchnorm_cra_read),
      .avs_cra_write(avs_batchnorm_cra_write),
      .avs_cra_address(avs_batchnorm_cra_address),
      .avs_cra_writedata(avs_batchnorm_cra_writedata),
      .avs_cra_byteenable(avs_batchnorm_cra_byteenable),
      .avs_cra_readdata(avs_batchnorm_cra_readdata),
      .avs_cra_readdatavalid(avs_batchnorm_cra_readdatavalid)
   );

   // INST batchnorm_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   batchnorm_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(batchnorm_wg_disp_start_out),
      .valid_in(batchnorm_wg_disp_valid_out[0]),
      .stall_out(batchnorm_wg_disp_stall_in[0]),
      .stall_out_lookahead(batchnorm_wg_disp_stall_in_lookahead[0]),
      .stall_in(batchnorm_stall_out[0]),
      .valid_out(batchnorm_valid_in[0]),
      .group_id_in(batchnorm_wg_disp_group_id_out),
      .global_id_base_in(batchnorm_wg_disp_global_id_base_out),
      .local_size(batchnorm_local_size),
      .global_size(batchnorm_global_size),
      .local_id(batchnorm_local_id[0]),
      .global_id(batchnorm_global_id[0]),
      .group_id(batchnorm_group_id[0])
   );

   // INST batchnorm_inst_0 of batchnorm_top_wrapper_0
   batchnorm_top_wrapper_0 batchnorm_inst_0
   (
      .start(batchnorm_start_kernel_copy[0]),
      .kernel_arguments(batchnorm_kernel_arguments),
      .work_dim(batchnorm_work_dim),
      .global_offset(batchnorm_global_offset),
      .kernel_valid_out(batchnorm_valid_out[0]),
      .has_a_write_pending(batchnorm_pending_write[0]),
      .has_a_lsu_active(batchnorm_lsu_active[0]),
      .global_id(batchnorm_global_id[0]),
      .local_id(batchnorm_local_id[0]),
      .group_id(batchnorm_group_id[0]),
      .global_size(batchnorm_global_size),
      .local_size(batchnorm_local_size),
      .num_groups(batchnorm_num_groups),
      .workgroup_size(batchnorm_wg_size),
      .kernel_stall_out(batchnorm_stall_out[0]),
      .kernel_valid_in(batchnorm_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_batchnorm0
      .avm_unnamed_batchnorm0_enable(batchnorm_0_avm_unnamed_batchnorm0_enable),
      .avm_unnamed_batchnorm0_read(batchnorm_0_avm_unnamed_batchnorm0_read),
      .avm_unnamed_batchnorm0_write(batchnorm_0_avm_unnamed_batchnorm0_write),
      .avm_unnamed_batchnorm0_burstcount(batchnorm_0_avm_unnamed_batchnorm0_burstcount),
      .avm_unnamed_batchnorm0_address(batchnorm_0_avm_unnamed_batchnorm0_address),
      .avm_unnamed_batchnorm0_writedata(batchnorm_0_avm_unnamed_batchnorm0_writedata),
      .avm_unnamed_batchnorm0_byteenable(batchnorm_0_avm_unnamed_batchnorm0_byteenable),
      .avm_unnamed_batchnorm0_waitrequest(batchnorm_0_avm_unnamed_batchnorm0_waitrequest),
      .avm_unnamed_batchnorm0_readdata(batchnorm_0_avm_unnamed_batchnorm0_readdata),
      .avm_unnamed_batchnorm0_readdatavalid(batchnorm_0_avm_unnamed_batchnorm0_readdatavalid),
      .avm_unnamed_batchnorm0_writeack(batchnorm_0_avm_unnamed_batchnorm0_writeack),
      // AVM avm_unnamed_batchnorm1
      .avm_unnamed_batchnorm1_enable(batchnorm_0_avm_unnamed_batchnorm1_enable),
      .avm_unnamed_batchnorm1_read(batchnorm_0_avm_unnamed_batchnorm1_read),
      .avm_unnamed_batchnorm1_write(batchnorm_0_avm_unnamed_batchnorm1_write),
      .avm_unnamed_batchnorm1_burstcount(batchnorm_0_avm_unnamed_batchnorm1_burstcount),
      .avm_unnamed_batchnorm1_address(batchnorm_0_avm_unnamed_batchnorm1_address),
      .avm_unnamed_batchnorm1_writedata(batchnorm_0_avm_unnamed_batchnorm1_writedata),
      .avm_unnamed_batchnorm1_byteenable(batchnorm_0_avm_unnamed_batchnorm1_byteenable),
      .avm_unnamed_batchnorm1_waitrequest(batchnorm_0_avm_unnamed_batchnorm1_waitrequest),
      .avm_unnamed_batchnorm1_readdata(batchnorm_0_avm_unnamed_batchnorm1_readdata),
      .avm_unnamed_batchnorm1_readdatavalid(batchnorm_0_avm_unnamed_batchnorm1_readdatavalid),
      .avm_unnamed_batchnorm1_writeack(batchnorm_0_avm_unnamed_batchnorm1_writeack),
      // AVM avm_unnamed_batchnorm2
      .avm_unnamed_batchnorm2_enable(batchnorm_0_avm_unnamed_batchnorm2_enable),
      .avm_unnamed_batchnorm2_read(batchnorm_0_avm_unnamed_batchnorm2_read),
      .avm_unnamed_batchnorm2_write(batchnorm_0_avm_unnamed_batchnorm2_write),
      .avm_unnamed_batchnorm2_burstcount(batchnorm_0_avm_unnamed_batchnorm2_burstcount),
      .avm_unnamed_batchnorm2_address(batchnorm_0_avm_unnamed_batchnorm2_address),
      .avm_unnamed_batchnorm2_writedata(batchnorm_0_avm_unnamed_batchnorm2_writedata),
      .avm_unnamed_batchnorm2_byteenable(batchnorm_0_avm_unnamed_batchnorm2_byteenable),
      .avm_unnamed_batchnorm2_waitrequest(batchnorm_0_avm_unnamed_batchnorm2_waitrequest),
      .avm_unnamed_batchnorm2_readdata(batchnorm_0_avm_unnamed_batchnorm2_readdata),
      .avm_unnamed_batchnorm2_readdatavalid(batchnorm_0_avm_unnamed_batchnorm2_readdatavalid),
      .avm_unnamed_batchnorm2_writeack(batchnorm_0_avm_unnamed_batchnorm2_writeack),
      // AVM avm_unnamed_batchnorm3
      .avm_unnamed_batchnorm3_enable(batchnorm_0_avm_unnamed_batchnorm3_enable),
      .avm_unnamed_batchnorm3_read(batchnorm_0_avm_unnamed_batchnorm3_read),
      .avm_unnamed_batchnorm3_write(batchnorm_0_avm_unnamed_batchnorm3_write),
      .avm_unnamed_batchnorm3_burstcount(batchnorm_0_avm_unnamed_batchnorm3_burstcount),
      .avm_unnamed_batchnorm3_address(batchnorm_0_avm_unnamed_batchnorm3_address),
      .avm_unnamed_batchnorm3_writedata(batchnorm_0_avm_unnamed_batchnorm3_writedata),
      .avm_unnamed_batchnorm3_byteenable(batchnorm_0_avm_unnamed_batchnorm3_byteenable),
      .avm_unnamed_batchnorm3_waitrequest(batchnorm_0_avm_unnamed_batchnorm3_waitrequest),
      .avm_unnamed_batchnorm3_readdata(batchnorm_0_avm_unnamed_batchnorm3_readdata),
      .avm_unnamed_batchnorm3_readdatavalid(batchnorm_0_avm_unnamed_batchnorm3_readdatavalid),
      .avm_unnamed_batchnorm3_writeack(batchnorm_0_avm_unnamed_batchnorm3_writeack),
      // AVM avm_unnamed_batchnorm4
      .avm_unnamed_batchnorm4_enable(batchnorm_0_avm_unnamed_batchnorm4_enable),
      .avm_unnamed_batchnorm4_read(batchnorm_0_avm_unnamed_batchnorm4_read),
      .avm_unnamed_batchnorm4_write(batchnorm_0_avm_unnamed_batchnorm4_write),
      .avm_unnamed_batchnorm4_burstcount(batchnorm_0_avm_unnamed_batchnorm4_burstcount),
      .avm_unnamed_batchnorm4_address(batchnorm_0_avm_unnamed_batchnorm4_address),
      .avm_unnamed_batchnorm4_writedata(batchnorm_0_avm_unnamed_batchnorm4_writedata),
      .avm_unnamed_batchnorm4_byteenable(batchnorm_0_avm_unnamed_batchnorm4_byteenable),
      .avm_unnamed_batchnorm4_waitrequest(batchnorm_0_avm_unnamed_batchnorm4_waitrequest),
      .avm_unnamed_batchnorm4_readdata(batchnorm_0_avm_unnamed_batchnorm4_readdata),
      .avm_unnamed_batchnorm4_readdatavalid(batchnorm_0_avm_unnamed_batchnorm4_readdatavalid),
      .avm_unnamed_batchnorm4_writeack(batchnorm_0_avm_unnamed_batchnorm4_writeack),
      // AVM avm_unnamed_batchnorm5
      .avm_unnamed_batchnorm5_enable(batchnorm_0_avm_unnamed_batchnorm5_enable),
      .avm_unnamed_batchnorm5_read(batchnorm_0_avm_unnamed_batchnorm5_read),
      .avm_unnamed_batchnorm5_write(batchnorm_0_avm_unnamed_batchnorm5_write),
      .avm_unnamed_batchnorm5_burstcount(batchnorm_0_avm_unnamed_batchnorm5_burstcount),
      .avm_unnamed_batchnorm5_address(batchnorm_0_avm_unnamed_batchnorm5_address),
      .avm_unnamed_batchnorm5_writedata(batchnorm_0_avm_unnamed_batchnorm5_writedata),
      .avm_unnamed_batchnorm5_byteenable(batchnorm_0_avm_unnamed_batchnorm5_byteenable),
      .avm_unnamed_batchnorm5_waitrequest(batchnorm_0_avm_unnamed_batchnorm5_waitrequest),
      .avm_unnamed_batchnorm5_readdata(batchnorm_0_avm_unnamed_batchnorm5_readdata),
      .avm_unnamed_batchnorm5_readdatavalid(batchnorm_0_avm_unnamed_batchnorm5_readdatavalid),
      .avm_unnamed_batchnorm5_writeack(batchnorm_0_avm_unnamed_batchnorm5_writeack)
   );

   // INST batchnorm_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   batchnorm_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(batchnorm_start_chain[0]),
      .start_kernel(batchnorm_start_kernel_copy[0]),
      .start_finish_detector(batchnorm_start_task_fd[0]),
      .start_finish_chain_element(batchnorm_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module conv_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_conv,
   // AVS avs_conv_cra
   input logic avs_conv_cra_enable,
   input logic avs_conv_cra_read,
   input logic avs_conv_cra_write,
   input logic [4:0] avs_conv_cra_address,
   input logic [63:0] avs_conv_cra_writedata,
   input logic [7:0] avs_conv_cra_byteenable,
   output logic [63:0] avs_conv_cra_readdata,
   output logic avs_conv_cra_readdatavalid,
   // AVM conv_0_avm_unnamed_conv0
   output logic conv_0_avm_unnamed_conv0_enable,
   output logic conv_0_avm_unnamed_conv0_read,
   output logic conv_0_avm_unnamed_conv0_write,
   output logic [4:0] conv_0_avm_unnamed_conv0_burstcount,
   output logic [29:0] conv_0_avm_unnamed_conv0_address,
   output logic [255:0] conv_0_avm_unnamed_conv0_writedata,
   output logic [31:0] conv_0_avm_unnamed_conv0_byteenable,
   input logic conv_0_avm_unnamed_conv0_waitrequest,
   input logic [255:0] conv_0_avm_unnamed_conv0_readdata,
   input logic conv_0_avm_unnamed_conv0_readdatavalid,
   input logic conv_0_avm_unnamed_conv0_writeack,
   // AVM conv_0_avm_unnamed_conv1
   output logic conv_0_avm_unnamed_conv1_enable,
   output logic conv_0_avm_unnamed_conv1_read,
   output logic conv_0_avm_unnamed_conv1_write,
   output logic [4:0] conv_0_avm_unnamed_conv1_burstcount,
   output logic [29:0] conv_0_avm_unnamed_conv1_address,
   output logic [255:0] conv_0_avm_unnamed_conv1_writedata,
   output logic [31:0] conv_0_avm_unnamed_conv1_byteenable,
   input logic conv_0_avm_unnamed_conv1_waitrequest,
   input logic [255:0] conv_0_avm_unnamed_conv1_readdata,
   input logic conv_0_avm_unnamed_conv1_readdatavalid,
   input logic conv_0_avm_unnamed_conv1_writeack,
   // AVM conv_0_avm_unnamed_conv7
   output logic conv_0_avm_unnamed_conv7_enable,
   output logic conv_0_avm_unnamed_conv7_read,
   output logic conv_0_avm_unnamed_conv7_write,
   output logic [4:0] conv_0_avm_unnamed_conv7_burstcount,
   output logic [29:0] conv_0_avm_unnamed_conv7_address,
   output logic [255:0] conv_0_avm_unnamed_conv7_writedata,
   output logic [31:0] conv_0_avm_unnamed_conv7_byteenable,
   input logic conv_0_avm_unnamed_conv7_waitrequest,
   input logic [255:0] conv_0_avm_unnamed_conv7_readdata,
   input logic conv_0_avm_unnamed_conv7_readdatavalid,
   input logic conv_0_avm_unnamed_conv7_writeack
);
   logic conv_start;
   logic [0:0] conv_start_chain;
   logic [0:0] conv_start_kernel_copy;
   logic [0:0] conv_start_task_fd;
   logic [0:0] conv_start_finish_element;
   logic conv_finish;
   logic [0:0] conv_finish_kernel_copy;
   logic [0:0] conv_finish_chain;
   logic [31:0] conv_global_size [2:0];
   logic [31:0] conv_num_groups [2:0];
   logic [31:0] conv_local_size [2:0];
   logic [31:0] conv_global_offset [2:0];
   logic [31:0] conv_work_dim;
   logic [31:0] conv_wg_size;
   logic [0:0] conv_wg_disp_stall_in;
   logic [0:0] conv_wg_disp_stall_in_lookahead;
   logic [0:0] conv_wg_disp_valid_out;
   logic conv_wg_disp_start_out;
   logic [31:0] conv_wg_disp_group_id_out [2:0];
   logic [31:0] conv_wg_disp_global_id_base_out [2:0];
   logic conv_wg_disp_dispatched_all_groups;
   logic [31:0] conv_global_id [1][2:0];
   logic [31:0] conv_local_id [1][2:0];
   logic [31:0] conv_group_id [1][2:0];
   logic [0:0] conv_pending_write;
   logic [0:0] conv_lsu_active;
   logic [0:0] conv_valid_in;
   logic [0:0] conv_valid_out;
   logic [0:0] conv_stall_in;
   logic [0:0] conv_stall_out;
   logic conv_cra_pending_write;
   logic conv_cra_lsu_active;
   logic conv_cra_valid_in;
   logic [447:0] conv_kernel_arguments;

   assign conv_start_chain[0] = conv_start;
   assign conv_finish_chain[0] = 1'b1;
   assign conv_cra_pending_write = |conv_pending_write;
   assign conv_cra_lsu_active = |conv_lsu_active;
   assign conv_cra_valid_in = |conv_valid_in;
   assign conv_stall_in = 0;
   // INST conv_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   conv_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv_start),
      .num_groups(conv_num_groups),
      .local_size(conv_local_size),
      .stall_in(conv_wg_disp_stall_in),
      .stall_in_lookahead(conv_wg_disp_stall_in_lookahead),
      .valid_out(conv_wg_disp_valid_out),
      .group_id_out(conv_wg_disp_group_id_out),
      .global_id_base_out(conv_wg_disp_global_id_base_out),
      .start_out(conv_wg_disp_start_out),
      .dispatched_all_groups(conv_wg_disp_dispatched_all_groups)
   );

   // INST conv_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv_start),
      .wg_size(conv_wg_size),
      .wg_dispatch_valid_out(conv_wg_disp_valid_out),
      .wg_dispatch_stall_in(conv_wg_disp_stall_in),
      .dispatched_all_groups(conv_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(conv_valid_out),
      .kernel_copy_stall_in(conv_stall_in),
      .pending_writes(conv_cra_pending_write),
      .finish(conv_finish)
   );

   // INST conv_cra_slave_inst of conv_function_cra_slave
   conv_function_cra_slave conv_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv_start),
      .finish(conv_finish),
      .global_offset_0(conv_global_offset[0]),
      .global_offset_1(conv_global_offset[1]),
      .global_offset_2(conv_global_offset[2]),
      .work_dim(conv_work_dim),
      .has_a_lsu_active(conv_cra_lsu_active),
      .has_a_write_pending(conv_cra_pending_write),
      .valid_in(conv_cra_valid_in),
      .global_size_0(conv_global_size[0]),
      .global_size_1(conv_global_size[1]),
      .global_size_2(conv_global_size[2]),
      .num_groups_0(conv_num_groups[0]),
      .num_groups_1(conv_num_groups[1]),
      .num_groups_2(conv_num_groups[2]),
      .local_size_0(conv_local_size[0]),
      .local_size_1(conv_local_size[1]),
      .local_size_2(conv_local_size[2]),
      .workgroup_size(conv_wg_size),
      .kernel_arguments(conv_kernel_arguments),
      .cra_irq(cra_irq_conv),
      // AVS avs_cra
      .avs_cra_enable(avs_conv_cra_enable),
      .avs_cra_read(avs_conv_cra_read),
      .avs_cra_write(avs_conv_cra_write),
      .avs_cra_address(avs_conv_cra_address),
      .avs_cra_writedata(avs_conv_cra_writedata),
      .avs_cra_byteenable(avs_conv_cra_byteenable),
      .avs_cra_readdata(avs_conv_cra_readdata),
      .avs_cra_readdatavalid(avs_conv_cra_readdatavalid)
   );

   // INST conv_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(3),
      .LOCAL_WIDTH_Y(3),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   conv_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv_wg_disp_start_out),
      .valid_in(conv_wg_disp_valid_out[0]),
      .stall_out(conv_wg_disp_stall_in[0]),
      .stall_out_lookahead(conv_wg_disp_stall_in_lookahead[0]),
      .stall_in(conv_stall_out[0]),
      .valid_out(conv_valid_in[0]),
      .group_id_in(conv_wg_disp_group_id_out),
      .global_id_base_in(conv_wg_disp_global_id_base_out),
      .local_size(conv_local_size),
      .global_size(conv_global_size),
      .local_id(conv_local_id[0]),
      .global_id(conv_global_id[0]),
      .group_id(conv_group_id[0])
   );

   // INST conv_inst_0 of conv_top_wrapper_0
   conv_top_wrapper_0 conv_inst_0
   (
      .start(conv_start_kernel_copy[0]),
      .kernel_arguments(conv_kernel_arguments),
      .work_dim(conv_work_dim),
      .global_offset(conv_global_offset),
      .kernel_valid_out(conv_valid_out[0]),
      .has_a_write_pending(conv_pending_write[0]),
      .has_a_lsu_active(conv_lsu_active[0]),
      .global_id(conv_global_id[0]),
      .local_id(conv_local_id[0]),
      .group_id(conv_group_id[0]),
      .global_size(conv_global_size),
      .local_size(conv_local_size),
      .num_groups(conv_num_groups),
      .workgroup_size(conv_wg_size),
      .kernel_stall_out(conv_stall_out[0]),
      .kernel_valid_in(conv_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_conv0
      .avm_unnamed_conv0_enable(conv_0_avm_unnamed_conv0_enable),
      .avm_unnamed_conv0_read(conv_0_avm_unnamed_conv0_read),
      .avm_unnamed_conv0_write(conv_0_avm_unnamed_conv0_write),
      .avm_unnamed_conv0_burstcount(conv_0_avm_unnamed_conv0_burstcount),
      .avm_unnamed_conv0_address(conv_0_avm_unnamed_conv0_address),
      .avm_unnamed_conv0_writedata(conv_0_avm_unnamed_conv0_writedata),
      .avm_unnamed_conv0_byteenable(conv_0_avm_unnamed_conv0_byteenable),
      .avm_unnamed_conv0_waitrequest(conv_0_avm_unnamed_conv0_waitrequest),
      .avm_unnamed_conv0_readdata(conv_0_avm_unnamed_conv0_readdata),
      .avm_unnamed_conv0_readdatavalid(conv_0_avm_unnamed_conv0_readdatavalid),
      .avm_unnamed_conv0_writeack(conv_0_avm_unnamed_conv0_writeack),
      // AVM avm_unnamed_conv1
      .avm_unnamed_conv1_enable(conv_0_avm_unnamed_conv1_enable),
      .avm_unnamed_conv1_read(conv_0_avm_unnamed_conv1_read),
      .avm_unnamed_conv1_write(conv_0_avm_unnamed_conv1_write),
      .avm_unnamed_conv1_burstcount(conv_0_avm_unnamed_conv1_burstcount),
      .avm_unnamed_conv1_address(conv_0_avm_unnamed_conv1_address),
      .avm_unnamed_conv1_writedata(conv_0_avm_unnamed_conv1_writedata),
      .avm_unnamed_conv1_byteenable(conv_0_avm_unnamed_conv1_byteenable),
      .avm_unnamed_conv1_waitrequest(conv_0_avm_unnamed_conv1_waitrequest),
      .avm_unnamed_conv1_readdata(conv_0_avm_unnamed_conv1_readdata),
      .avm_unnamed_conv1_readdatavalid(conv_0_avm_unnamed_conv1_readdatavalid),
      .avm_unnamed_conv1_writeack(conv_0_avm_unnamed_conv1_writeack),
      // AVM avm_unnamed_conv7
      .avm_unnamed_conv7_enable(conv_0_avm_unnamed_conv7_enable),
      .avm_unnamed_conv7_read(conv_0_avm_unnamed_conv7_read),
      .avm_unnamed_conv7_write(conv_0_avm_unnamed_conv7_write),
      .avm_unnamed_conv7_burstcount(conv_0_avm_unnamed_conv7_burstcount),
      .avm_unnamed_conv7_address(conv_0_avm_unnamed_conv7_address),
      .avm_unnamed_conv7_writedata(conv_0_avm_unnamed_conv7_writedata),
      .avm_unnamed_conv7_byteenable(conv_0_avm_unnamed_conv7_byteenable),
      .avm_unnamed_conv7_waitrequest(conv_0_avm_unnamed_conv7_waitrequest),
      .avm_unnamed_conv7_readdata(conv_0_avm_unnamed_conv7_readdata),
      .avm_unnamed_conv7_readdatavalid(conv_0_avm_unnamed_conv7_readdatavalid),
      .avm_unnamed_conv7_writeack(conv_0_avm_unnamed_conv7_writeack)
   );

   // INST conv_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   conv_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(conv_start_chain[0]),
      .start_kernel(conv_start_kernel_copy[0]),
      .start_finish_detector(conv_start_task_fd[0]),
      .start_finish_chain_element(conv_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv1x1_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module conv1x1_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_conv1x1,
   // AVS avs_conv1x1_cra
   input logic avs_conv1x1_cra_enable,
   input logic avs_conv1x1_cra_read,
   input logic avs_conv1x1_cra_write,
   input logic [4:0] avs_conv1x1_cra_address,
   input logic [63:0] avs_conv1x1_cra_writedata,
   input logic [7:0] avs_conv1x1_cra_byteenable,
   output logic [63:0] avs_conv1x1_cra_readdata,
   output logic avs_conv1x1_cra_readdatavalid,
   // AVM conv1x1_0_avm_unnamed_conv1x11
   output logic conv1x1_0_avm_unnamed_conv1x11_enable,
   output logic conv1x1_0_avm_unnamed_conv1x11_read,
   output logic conv1x1_0_avm_unnamed_conv1x11_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x11_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x11_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x11_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x11_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x11_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x11_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x11_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x11_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x110
   output logic conv1x1_0_avm_unnamed_conv1x110_enable,
   output logic conv1x1_0_avm_unnamed_conv1x110_read,
   output logic conv1x1_0_avm_unnamed_conv1x110_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x110_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x110_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x110_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x110_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x110_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x110_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x110_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x110_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x111
   output logic conv1x1_0_avm_unnamed_conv1x111_enable,
   output logic conv1x1_0_avm_unnamed_conv1x111_read,
   output logic conv1x1_0_avm_unnamed_conv1x111_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x111_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x111_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x111_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x111_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x111_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x111_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x111_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x111_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x113
   output logic conv1x1_0_avm_unnamed_conv1x113_enable,
   output logic conv1x1_0_avm_unnamed_conv1x113_read,
   output logic conv1x1_0_avm_unnamed_conv1x113_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x113_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x113_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x113_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x113_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x113_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x113_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x113_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x113_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x114
   output logic conv1x1_0_avm_unnamed_conv1x114_enable,
   output logic conv1x1_0_avm_unnamed_conv1x114_read,
   output logic conv1x1_0_avm_unnamed_conv1x114_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x114_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x114_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x114_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x114_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x114_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x114_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x114_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x114_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x115
   output logic conv1x1_0_avm_unnamed_conv1x115_enable,
   output logic conv1x1_0_avm_unnamed_conv1x115_read,
   output logic conv1x1_0_avm_unnamed_conv1x115_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x115_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x115_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x115_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x115_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x115_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x115_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x115_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x115_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x12
   output logic conv1x1_0_avm_unnamed_conv1x12_enable,
   output logic conv1x1_0_avm_unnamed_conv1x12_read,
   output logic conv1x1_0_avm_unnamed_conv1x12_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x12_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x12_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x12_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x12_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x12_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x12_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x12_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x12_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x13
   output logic conv1x1_0_avm_unnamed_conv1x13_enable,
   output logic conv1x1_0_avm_unnamed_conv1x13_read,
   output logic conv1x1_0_avm_unnamed_conv1x13_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x13_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x13_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x13_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x13_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x13_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x13_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x13_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x13_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x15
   output logic conv1x1_0_avm_unnamed_conv1x15_enable,
   output logic conv1x1_0_avm_unnamed_conv1x15_read,
   output logic conv1x1_0_avm_unnamed_conv1x15_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x15_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x15_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x15_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x15_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x15_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x15_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x15_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x15_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x16
   output logic conv1x1_0_avm_unnamed_conv1x16_enable,
   output logic conv1x1_0_avm_unnamed_conv1x16_read,
   output logic conv1x1_0_avm_unnamed_conv1x16_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x16_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x16_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x16_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x16_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x16_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x16_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x16_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x16_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x17
   output logic conv1x1_0_avm_unnamed_conv1x17_enable,
   output logic conv1x1_0_avm_unnamed_conv1x17_read,
   output logic conv1x1_0_avm_unnamed_conv1x17_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x17_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x17_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x17_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x17_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x17_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x17_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x17_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x17_writeack,
   // AVM conv1x1_0_avm_unnamed_conv1x19
   output logic conv1x1_0_avm_unnamed_conv1x19_enable,
   output logic conv1x1_0_avm_unnamed_conv1x19_read,
   output logic conv1x1_0_avm_unnamed_conv1x19_write,
   output logic [4:0] conv1x1_0_avm_unnamed_conv1x19_burstcount,
   output logic [29:0] conv1x1_0_avm_unnamed_conv1x19_address,
   output logic [255:0] conv1x1_0_avm_unnamed_conv1x19_writedata,
   output logic [31:0] conv1x1_0_avm_unnamed_conv1x19_byteenable,
   input logic conv1x1_0_avm_unnamed_conv1x19_waitrequest,
   input logic [255:0] conv1x1_0_avm_unnamed_conv1x19_readdata,
   input logic conv1x1_0_avm_unnamed_conv1x19_readdatavalid,
   input logic conv1x1_0_avm_unnamed_conv1x19_writeack
);
   logic conv1x1_start;
   logic [0:0] conv1x1_start_chain;
   logic [0:0] conv1x1_start_kernel_copy;
   logic [0:0] conv1x1_start_task_fd;
   logic [0:0] conv1x1_start_finish_element;
   logic conv1x1_finish;
   logic [0:0] conv1x1_finish_kernel_copy;
   logic [0:0] conv1x1_finish_chain;
   logic [31:0] conv1x1_global_size [2:0];
   logic [31:0] conv1x1_num_groups [2:0];
   logic [31:0] conv1x1_local_size [2:0];
   logic [31:0] conv1x1_global_offset [2:0];
   logic [31:0] conv1x1_work_dim;
   logic [31:0] conv1x1_wg_size;
   logic [0:0] conv1x1_wg_disp_stall_in;
   logic [0:0] conv1x1_wg_disp_stall_in_lookahead;
   logic [0:0] conv1x1_wg_disp_valid_out;
   logic conv1x1_wg_disp_start_out;
   logic [31:0] conv1x1_wg_disp_group_id_out [2:0];
   logic [31:0] conv1x1_wg_disp_global_id_base_out [2:0];
   logic conv1x1_wg_disp_dispatched_all_groups;
   logic [31:0] conv1x1_global_id [1][2:0];
   logic [31:0] conv1x1_local_id [1][2:0];
   logic [31:0] conv1x1_group_id [1][2:0];
   logic [0:0] conv1x1_pending_write;
   logic [0:0] conv1x1_lsu_active;
   logic [0:0] conv1x1_valid_in;
   logic [0:0] conv1x1_valid_out;
   logic [0:0] conv1x1_stall_in;
   logic [0:0] conv1x1_stall_out;
   logic conv1x1_cra_pending_write;
   logic conv1x1_cra_lsu_active;
   logic conv1x1_cra_valid_in;
   logic [351:0] conv1x1_kernel_arguments;

   assign conv1x1_start_chain[0] = conv1x1_start;
   assign conv1x1_finish_chain[0] = 1'b1;
   assign conv1x1_cra_pending_write = |conv1x1_pending_write;
   assign conv1x1_cra_lsu_active = |conv1x1_lsu_active;
   assign conv1x1_cra_valid_in = |conv1x1_valid_in;
   assign conv1x1_stall_in = 0;
   // INST conv1x1_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   conv1x1_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv1x1_start),
      .num_groups(conv1x1_num_groups),
      .local_size(conv1x1_local_size),
      .stall_in(conv1x1_wg_disp_stall_in),
      .stall_in_lookahead(conv1x1_wg_disp_stall_in_lookahead),
      .valid_out(conv1x1_wg_disp_valid_out),
      .group_id_out(conv1x1_wg_disp_group_id_out),
      .global_id_base_out(conv1x1_wg_disp_global_id_base_out),
      .start_out(conv1x1_wg_disp_start_out),
      .dispatched_all_groups(conv1x1_wg_disp_dispatched_all_groups)
   );

   // INST conv1x1_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv1x1_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv1x1_start),
      .wg_size(conv1x1_wg_size),
      .wg_dispatch_valid_out(conv1x1_wg_disp_valid_out),
      .wg_dispatch_stall_in(conv1x1_wg_disp_stall_in),
      .dispatched_all_groups(conv1x1_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(conv1x1_valid_out),
      .kernel_copy_stall_in(conv1x1_stall_in),
      .pending_writes(conv1x1_cra_pending_write),
      .finish(conv1x1_finish)
   );

   // INST conv1x1_cra_slave_inst of conv1x1_function_cra_slave
   conv1x1_function_cra_slave conv1x1_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv1x1_start),
      .finish(conv1x1_finish),
      .global_offset_0(conv1x1_global_offset[0]),
      .global_offset_1(conv1x1_global_offset[1]),
      .global_offset_2(conv1x1_global_offset[2]),
      .work_dim(conv1x1_work_dim),
      .has_a_lsu_active(conv1x1_cra_lsu_active),
      .has_a_write_pending(conv1x1_cra_pending_write),
      .valid_in(conv1x1_cra_valid_in),
      .global_size_0(conv1x1_global_size[0]),
      .global_size_1(conv1x1_global_size[1]),
      .global_size_2(conv1x1_global_size[2]),
      .num_groups_0(conv1x1_num_groups[0]),
      .num_groups_1(conv1x1_num_groups[1]),
      .num_groups_2(conv1x1_num_groups[2]),
      .local_size_0(conv1x1_local_size[0]),
      .local_size_1(conv1x1_local_size[1]),
      .local_size_2(conv1x1_local_size[2]),
      .workgroup_size(conv1x1_wg_size),
      .kernel_arguments(conv1x1_kernel_arguments),
      .cra_irq(cra_irq_conv1x1),
      // AVS avs_cra
      .avs_cra_enable(avs_conv1x1_cra_enable),
      .avs_cra_read(avs_conv1x1_cra_read),
      .avs_cra_write(avs_conv1x1_cra_write),
      .avs_cra_address(avs_conv1x1_cra_address),
      .avs_cra_writedata(avs_conv1x1_cra_writedata),
      .avs_cra_byteenable(avs_conv1x1_cra_byteenable),
      .avs_cra_readdata(avs_conv1x1_cra_readdata),
      .avs_cra_readdatavalid(avs_conv1x1_cra_readdatavalid)
   );

   // INST conv1x1_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   conv1x1_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv1x1_wg_disp_start_out),
      .valid_in(conv1x1_wg_disp_valid_out[0]),
      .stall_out(conv1x1_wg_disp_stall_in[0]),
      .stall_out_lookahead(conv1x1_wg_disp_stall_in_lookahead[0]),
      .stall_in(conv1x1_stall_out[0]),
      .valid_out(conv1x1_valid_in[0]),
      .group_id_in(conv1x1_wg_disp_group_id_out),
      .global_id_base_in(conv1x1_wg_disp_global_id_base_out),
      .local_size(conv1x1_local_size),
      .global_size(conv1x1_global_size),
      .local_id(conv1x1_local_id[0]),
      .global_id(conv1x1_global_id[0]),
      .group_id(conv1x1_group_id[0])
   );

   // INST conv1x1_inst_0 of conv1x1_top_wrapper_0
   conv1x1_top_wrapper_0 conv1x1_inst_0
   (
      .start(conv1x1_start_kernel_copy[0]),
      .kernel_arguments(conv1x1_kernel_arguments),
      .work_dim(conv1x1_work_dim),
      .global_offset(conv1x1_global_offset),
      .kernel_valid_out(conv1x1_valid_out[0]),
      .has_a_write_pending(conv1x1_pending_write[0]),
      .has_a_lsu_active(conv1x1_lsu_active[0]),
      .global_id(conv1x1_global_id[0]),
      .local_id(conv1x1_local_id[0]),
      .group_id(conv1x1_group_id[0]),
      .global_size(conv1x1_global_size),
      .local_size(conv1x1_local_size),
      .num_groups(conv1x1_num_groups),
      .workgroup_size(conv1x1_wg_size),
      .kernel_stall_out(conv1x1_stall_out[0]),
      .kernel_valid_in(conv1x1_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_conv1x11
      .avm_unnamed_conv1x11_enable(conv1x1_0_avm_unnamed_conv1x11_enable),
      .avm_unnamed_conv1x11_read(conv1x1_0_avm_unnamed_conv1x11_read),
      .avm_unnamed_conv1x11_write(conv1x1_0_avm_unnamed_conv1x11_write),
      .avm_unnamed_conv1x11_burstcount(conv1x1_0_avm_unnamed_conv1x11_burstcount),
      .avm_unnamed_conv1x11_address(conv1x1_0_avm_unnamed_conv1x11_address),
      .avm_unnamed_conv1x11_writedata(conv1x1_0_avm_unnamed_conv1x11_writedata),
      .avm_unnamed_conv1x11_byteenable(conv1x1_0_avm_unnamed_conv1x11_byteenable),
      .avm_unnamed_conv1x11_waitrequest(conv1x1_0_avm_unnamed_conv1x11_waitrequest),
      .avm_unnamed_conv1x11_readdata(conv1x1_0_avm_unnamed_conv1x11_readdata),
      .avm_unnamed_conv1x11_readdatavalid(conv1x1_0_avm_unnamed_conv1x11_readdatavalid),
      .avm_unnamed_conv1x11_writeack(conv1x1_0_avm_unnamed_conv1x11_writeack),
      // AVM avm_unnamed_conv1x110
      .avm_unnamed_conv1x110_enable(conv1x1_0_avm_unnamed_conv1x110_enable),
      .avm_unnamed_conv1x110_read(conv1x1_0_avm_unnamed_conv1x110_read),
      .avm_unnamed_conv1x110_write(conv1x1_0_avm_unnamed_conv1x110_write),
      .avm_unnamed_conv1x110_burstcount(conv1x1_0_avm_unnamed_conv1x110_burstcount),
      .avm_unnamed_conv1x110_address(conv1x1_0_avm_unnamed_conv1x110_address),
      .avm_unnamed_conv1x110_writedata(conv1x1_0_avm_unnamed_conv1x110_writedata),
      .avm_unnamed_conv1x110_byteenable(conv1x1_0_avm_unnamed_conv1x110_byteenable),
      .avm_unnamed_conv1x110_waitrequest(conv1x1_0_avm_unnamed_conv1x110_waitrequest),
      .avm_unnamed_conv1x110_readdata(conv1x1_0_avm_unnamed_conv1x110_readdata),
      .avm_unnamed_conv1x110_readdatavalid(conv1x1_0_avm_unnamed_conv1x110_readdatavalid),
      .avm_unnamed_conv1x110_writeack(conv1x1_0_avm_unnamed_conv1x110_writeack),
      // AVM avm_unnamed_conv1x111
      .avm_unnamed_conv1x111_enable(conv1x1_0_avm_unnamed_conv1x111_enable),
      .avm_unnamed_conv1x111_read(conv1x1_0_avm_unnamed_conv1x111_read),
      .avm_unnamed_conv1x111_write(conv1x1_0_avm_unnamed_conv1x111_write),
      .avm_unnamed_conv1x111_burstcount(conv1x1_0_avm_unnamed_conv1x111_burstcount),
      .avm_unnamed_conv1x111_address(conv1x1_0_avm_unnamed_conv1x111_address),
      .avm_unnamed_conv1x111_writedata(conv1x1_0_avm_unnamed_conv1x111_writedata),
      .avm_unnamed_conv1x111_byteenable(conv1x1_0_avm_unnamed_conv1x111_byteenable),
      .avm_unnamed_conv1x111_waitrequest(conv1x1_0_avm_unnamed_conv1x111_waitrequest),
      .avm_unnamed_conv1x111_readdata(conv1x1_0_avm_unnamed_conv1x111_readdata),
      .avm_unnamed_conv1x111_readdatavalid(conv1x1_0_avm_unnamed_conv1x111_readdatavalid),
      .avm_unnamed_conv1x111_writeack(conv1x1_0_avm_unnamed_conv1x111_writeack),
      // AVM avm_unnamed_conv1x113
      .avm_unnamed_conv1x113_enable(conv1x1_0_avm_unnamed_conv1x113_enable),
      .avm_unnamed_conv1x113_read(conv1x1_0_avm_unnamed_conv1x113_read),
      .avm_unnamed_conv1x113_write(conv1x1_0_avm_unnamed_conv1x113_write),
      .avm_unnamed_conv1x113_burstcount(conv1x1_0_avm_unnamed_conv1x113_burstcount),
      .avm_unnamed_conv1x113_address(conv1x1_0_avm_unnamed_conv1x113_address),
      .avm_unnamed_conv1x113_writedata(conv1x1_0_avm_unnamed_conv1x113_writedata),
      .avm_unnamed_conv1x113_byteenable(conv1x1_0_avm_unnamed_conv1x113_byteenable),
      .avm_unnamed_conv1x113_waitrequest(conv1x1_0_avm_unnamed_conv1x113_waitrequest),
      .avm_unnamed_conv1x113_readdata(conv1x1_0_avm_unnamed_conv1x113_readdata),
      .avm_unnamed_conv1x113_readdatavalid(conv1x1_0_avm_unnamed_conv1x113_readdatavalid),
      .avm_unnamed_conv1x113_writeack(conv1x1_0_avm_unnamed_conv1x113_writeack),
      // AVM avm_unnamed_conv1x114
      .avm_unnamed_conv1x114_enable(conv1x1_0_avm_unnamed_conv1x114_enable),
      .avm_unnamed_conv1x114_read(conv1x1_0_avm_unnamed_conv1x114_read),
      .avm_unnamed_conv1x114_write(conv1x1_0_avm_unnamed_conv1x114_write),
      .avm_unnamed_conv1x114_burstcount(conv1x1_0_avm_unnamed_conv1x114_burstcount),
      .avm_unnamed_conv1x114_address(conv1x1_0_avm_unnamed_conv1x114_address),
      .avm_unnamed_conv1x114_writedata(conv1x1_0_avm_unnamed_conv1x114_writedata),
      .avm_unnamed_conv1x114_byteenable(conv1x1_0_avm_unnamed_conv1x114_byteenable),
      .avm_unnamed_conv1x114_waitrequest(conv1x1_0_avm_unnamed_conv1x114_waitrequest),
      .avm_unnamed_conv1x114_readdata(conv1x1_0_avm_unnamed_conv1x114_readdata),
      .avm_unnamed_conv1x114_readdatavalid(conv1x1_0_avm_unnamed_conv1x114_readdatavalid),
      .avm_unnamed_conv1x114_writeack(conv1x1_0_avm_unnamed_conv1x114_writeack),
      // AVM avm_unnamed_conv1x115
      .avm_unnamed_conv1x115_enable(conv1x1_0_avm_unnamed_conv1x115_enable),
      .avm_unnamed_conv1x115_read(conv1x1_0_avm_unnamed_conv1x115_read),
      .avm_unnamed_conv1x115_write(conv1x1_0_avm_unnamed_conv1x115_write),
      .avm_unnamed_conv1x115_burstcount(conv1x1_0_avm_unnamed_conv1x115_burstcount),
      .avm_unnamed_conv1x115_address(conv1x1_0_avm_unnamed_conv1x115_address),
      .avm_unnamed_conv1x115_writedata(conv1x1_0_avm_unnamed_conv1x115_writedata),
      .avm_unnamed_conv1x115_byteenable(conv1x1_0_avm_unnamed_conv1x115_byteenable),
      .avm_unnamed_conv1x115_waitrequest(conv1x1_0_avm_unnamed_conv1x115_waitrequest),
      .avm_unnamed_conv1x115_readdata(conv1x1_0_avm_unnamed_conv1x115_readdata),
      .avm_unnamed_conv1x115_readdatavalid(conv1x1_0_avm_unnamed_conv1x115_readdatavalid),
      .avm_unnamed_conv1x115_writeack(conv1x1_0_avm_unnamed_conv1x115_writeack),
      // AVM avm_unnamed_conv1x12
      .avm_unnamed_conv1x12_enable(conv1x1_0_avm_unnamed_conv1x12_enable),
      .avm_unnamed_conv1x12_read(conv1x1_0_avm_unnamed_conv1x12_read),
      .avm_unnamed_conv1x12_write(conv1x1_0_avm_unnamed_conv1x12_write),
      .avm_unnamed_conv1x12_burstcount(conv1x1_0_avm_unnamed_conv1x12_burstcount),
      .avm_unnamed_conv1x12_address(conv1x1_0_avm_unnamed_conv1x12_address),
      .avm_unnamed_conv1x12_writedata(conv1x1_0_avm_unnamed_conv1x12_writedata),
      .avm_unnamed_conv1x12_byteenable(conv1x1_0_avm_unnamed_conv1x12_byteenable),
      .avm_unnamed_conv1x12_waitrequest(conv1x1_0_avm_unnamed_conv1x12_waitrequest),
      .avm_unnamed_conv1x12_readdata(conv1x1_0_avm_unnamed_conv1x12_readdata),
      .avm_unnamed_conv1x12_readdatavalid(conv1x1_0_avm_unnamed_conv1x12_readdatavalid),
      .avm_unnamed_conv1x12_writeack(conv1x1_0_avm_unnamed_conv1x12_writeack),
      // AVM avm_unnamed_conv1x13
      .avm_unnamed_conv1x13_enable(conv1x1_0_avm_unnamed_conv1x13_enable),
      .avm_unnamed_conv1x13_read(conv1x1_0_avm_unnamed_conv1x13_read),
      .avm_unnamed_conv1x13_write(conv1x1_0_avm_unnamed_conv1x13_write),
      .avm_unnamed_conv1x13_burstcount(conv1x1_0_avm_unnamed_conv1x13_burstcount),
      .avm_unnamed_conv1x13_address(conv1x1_0_avm_unnamed_conv1x13_address),
      .avm_unnamed_conv1x13_writedata(conv1x1_0_avm_unnamed_conv1x13_writedata),
      .avm_unnamed_conv1x13_byteenable(conv1x1_0_avm_unnamed_conv1x13_byteenable),
      .avm_unnamed_conv1x13_waitrequest(conv1x1_0_avm_unnamed_conv1x13_waitrequest),
      .avm_unnamed_conv1x13_readdata(conv1x1_0_avm_unnamed_conv1x13_readdata),
      .avm_unnamed_conv1x13_readdatavalid(conv1x1_0_avm_unnamed_conv1x13_readdatavalid),
      .avm_unnamed_conv1x13_writeack(conv1x1_0_avm_unnamed_conv1x13_writeack),
      // AVM avm_unnamed_conv1x15
      .avm_unnamed_conv1x15_enable(conv1x1_0_avm_unnamed_conv1x15_enable),
      .avm_unnamed_conv1x15_read(conv1x1_0_avm_unnamed_conv1x15_read),
      .avm_unnamed_conv1x15_write(conv1x1_0_avm_unnamed_conv1x15_write),
      .avm_unnamed_conv1x15_burstcount(conv1x1_0_avm_unnamed_conv1x15_burstcount),
      .avm_unnamed_conv1x15_address(conv1x1_0_avm_unnamed_conv1x15_address),
      .avm_unnamed_conv1x15_writedata(conv1x1_0_avm_unnamed_conv1x15_writedata),
      .avm_unnamed_conv1x15_byteenable(conv1x1_0_avm_unnamed_conv1x15_byteenable),
      .avm_unnamed_conv1x15_waitrequest(conv1x1_0_avm_unnamed_conv1x15_waitrequest),
      .avm_unnamed_conv1x15_readdata(conv1x1_0_avm_unnamed_conv1x15_readdata),
      .avm_unnamed_conv1x15_readdatavalid(conv1x1_0_avm_unnamed_conv1x15_readdatavalid),
      .avm_unnamed_conv1x15_writeack(conv1x1_0_avm_unnamed_conv1x15_writeack),
      // AVM avm_unnamed_conv1x16
      .avm_unnamed_conv1x16_enable(conv1x1_0_avm_unnamed_conv1x16_enable),
      .avm_unnamed_conv1x16_read(conv1x1_0_avm_unnamed_conv1x16_read),
      .avm_unnamed_conv1x16_write(conv1x1_0_avm_unnamed_conv1x16_write),
      .avm_unnamed_conv1x16_burstcount(conv1x1_0_avm_unnamed_conv1x16_burstcount),
      .avm_unnamed_conv1x16_address(conv1x1_0_avm_unnamed_conv1x16_address),
      .avm_unnamed_conv1x16_writedata(conv1x1_0_avm_unnamed_conv1x16_writedata),
      .avm_unnamed_conv1x16_byteenable(conv1x1_0_avm_unnamed_conv1x16_byteenable),
      .avm_unnamed_conv1x16_waitrequest(conv1x1_0_avm_unnamed_conv1x16_waitrequest),
      .avm_unnamed_conv1x16_readdata(conv1x1_0_avm_unnamed_conv1x16_readdata),
      .avm_unnamed_conv1x16_readdatavalid(conv1x1_0_avm_unnamed_conv1x16_readdatavalid),
      .avm_unnamed_conv1x16_writeack(conv1x1_0_avm_unnamed_conv1x16_writeack),
      // AVM avm_unnamed_conv1x17
      .avm_unnamed_conv1x17_enable(conv1x1_0_avm_unnamed_conv1x17_enable),
      .avm_unnamed_conv1x17_read(conv1x1_0_avm_unnamed_conv1x17_read),
      .avm_unnamed_conv1x17_write(conv1x1_0_avm_unnamed_conv1x17_write),
      .avm_unnamed_conv1x17_burstcount(conv1x1_0_avm_unnamed_conv1x17_burstcount),
      .avm_unnamed_conv1x17_address(conv1x1_0_avm_unnamed_conv1x17_address),
      .avm_unnamed_conv1x17_writedata(conv1x1_0_avm_unnamed_conv1x17_writedata),
      .avm_unnamed_conv1x17_byteenable(conv1x1_0_avm_unnamed_conv1x17_byteenable),
      .avm_unnamed_conv1x17_waitrequest(conv1x1_0_avm_unnamed_conv1x17_waitrequest),
      .avm_unnamed_conv1x17_readdata(conv1x1_0_avm_unnamed_conv1x17_readdata),
      .avm_unnamed_conv1x17_readdatavalid(conv1x1_0_avm_unnamed_conv1x17_readdatavalid),
      .avm_unnamed_conv1x17_writeack(conv1x1_0_avm_unnamed_conv1x17_writeack),
      // AVM avm_unnamed_conv1x19
      .avm_unnamed_conv1x19_enable(conv1x1_0_avm_unnamed_conv1x19_enable),
      .avm_unnamed_conv1x19_read(conv1x1_0_avm_unnamed_conv1x19_read),
      .avm_unnamed_conv1x19_write(conv1x1_0_avm_unnamed_conv1x19_write),
      .avm_unnamed_conv1x19_burstcount(conv1x1_0_avm_unnamed_conv1x19_burstcount),
      .avm_unnamed_conv1x19_address(conv1x1_0_avm_unnamed_conv1x19_address),
      .avm_unnamed_conv1x19_writedata(conv1x1_0_avm_unnamed_conv1x19_writedata),
      .avm_unnamed_conv1x19_byteenable(conv1x1_0_avm_unnamed_conv1x19_byteenable),
      .avm_unnamed_conv1x19_waitrequest(conv1x1_0_avm_unnamed_conv1x19_waitrequest),
      .avm_unnamed_conv1x19_readdata(conv1x1_0_avm_unnamed_conv1x19_readdata),
      .avm_unnamed_conv1x19_readdatavalid(conv1x1_0_avm_unnamed_conv1x19_readdatavalid),
      .avm_unnamed_conv1x19_writeack(conv1x1_0_avm_unnamed_conv1x19_writeack)
   );

   // INST conv1x1_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   conv1x1_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(conv1x1_start_chain[0]),
      .start_kernel(conv1x1_start_kernel_copy[0]),
      .start_finish_detector(conv1x1_start_task_fd[0]),
      .start_finish_chain_element(conv1x1_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE pool_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module pool_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_pool,
   // AVS avs_pool_cra
   input logic avs_pool_cra_enable,
   input logic avs_pool_cra_read,
   input logic avs_pool_cra_write,
   input logic [4:0] avs_pool_cra_address,
   input logic [63:0] avs_pool_cra_writedata,
   input logic [7:0] avs_pool_cra_byteenable,
   output logic [63:0] avs_pool_cra_readdata,
   output logic avs_pool_cra_readdatavalid,
   // AVM pool_0_avm_unnamed_pool3
   output logic pool_0_avm_unnamed_pool3_enable,
   output logic pool_0_avm_unnamed_pool3_read,
   output logic pool_0_avm_unnamed_pool3_write,
   output logic [4:0] pool_0_avm_unnamed_pool3_burstcount,
   output logic [29:0] pool_0_avm_unnamed_pool3_address,
   output logic [255:0] pool_0_avm_unnamed_pool3_writedata,
   output logic [31:0] pool_0_avm_unnamed_pool3_byteenable,
   input logic pool_0_avm_unnamed_pool3_waitrequest,
   input logic [255:0] pool_0_avm_unnamed_pool3_readdata,
   input logic pool_0_avm_unnamed_pool3_readdatavalid,
   input logic pool_0_avm_unnamed_pool3_writeack,
   // AVM pool_0_avm_unnamed_pool5
   output logic pool_0_avm_unnamed_pool5_enable,
   output logic pool_0_avm_unnamed_pool5_read,
   output logic pool_0_avm_unnamed_pool5_write,
   output logic [4:0] pool_0_avm_unnamed_pool5_burstcount,
   output logic [29:0] pool_0_avm_unnamed_pool5_address,
   output logic [255:0] pool_0_avm_unnamed_pool5_writedata,
   output logic [31:0] pool_0_avm_unnamed_pool5_byteenable,
   input logic pool_0_avm_unnamed_pool5_waitrequest,
   input logic [255:0] pool_0_avm_unnamed_pool5_readdata,
   input logic pool_0_avm_unnamed_pool5_readdatavalid,
   input logic pool_0_avm_unnamed_pool5_writeack
);
   logic pool_start;
   logic [0:0] pool_start_chain;
   logic [0:0] pool_start_kernel_copy;
   logic [0:0] pool_start_task_fd;
   logic [0:0] pool_start_finish_element;
   logic pool_finish;
   logic [0:0] pool_finish_kernel_copy;
   logic [0:0] pool_finish_chain;
   logic [31:0] pool_global_size [2:0];
   logic [31:0] pool_num_groups [2:0];
   logic [31:0] pool_local_size [2:0];
   logic [31:0] pool_global_offset [2:0];
   logic [31:0] pool_work_dim;
   logic [31:0] pool_wg_size;
   logic [0:0] pool_wg_disp_stall_in;
   logic [0:0] pool_wg_disp_stall_in_lookahead;
   logic [0:0] pool_wg_disp_valid_out;
   logic pool_wg_disp_start_out;
   logic [31:0] pool_wg_disp_group_id_out [2:0];
   logic [31:0] pool_wg_disp_global_id_base_out [2:0];
   logic pool_wg_disp_dispatched_all_groups;
   logic [31:0] pool_global_id [1][2:0];
   logic [31:0] pool_local_id [1][2:0];
   logic [31:0] pool_group_id [1][2:0];
   logic [0:0] pool_pending_write;
   logic [0:0] pool_lsu_active;
   logic [0:0] pool_valid_in;
   logic [0:0] pool_valid_out;
   logic [0:0] pool_stall_in;
   logic [0:0] pool_stall_out;
   logic pool_cra_pending_write;
   logic pool_cra_lsu_active;
   logic pool_cra_valid_in;
   logic [287:0] pool_kernel_arguments;

   assign pool_start_chain[0] = pool_start;
   assign pool_finish_chain[0] = 1'b1;
   assign pool_cra_pending_write = |pool_pending_write;
   assign pool_cra_lsu_active = |pool_lsu_active;
   assign pool_cra_valid_in = |pool_valid_in;
   assign pool_stall_in = 0;
   // INST pool_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   pool_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(pool_start),
      .num_groups(pool_num_groups),
      .local_size(pool_local_size),
      .stall_in(pool_wg_disp_stall_in),
      .stall_in_lookahead(pool_wg_disp_stall_in_lookahead),
      .valid_out(pool_wg_disp_valid_out),
      .group_id_out(pool_wg_disp_group_id_out),
      .global_id_base_out(pool_wg_disp_global_id_base_out),
      .start_out(pool_wg_disp_start_out),
      .dispatched_all_groups(pool_wg_disp_dispatched_all_groups)
   );

   // INST pool_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   pool_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(pool_start),
      .wg_size(pool_wg_size),
      .wg_dispatch_valid_out(pool_wg_disp_valid_out),
      .wg_dispatch_stall_in(pool_wg_disp_stall_in),
      .dispatched_all_groups(pool_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(pool_valid_out),
      .kernel_copy_stall_in(pool_stall_in),
      .pending_writes(pool_cra_pending_write),
      .finish(pool_finish)
   );

   // INST pool_cra_slave_inst of pool_function_cra_slave
   pool_function_cra_slave pool_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(pool_start),
      .finish(pool_finish),
      .global_offset_0(pool_global_offset[0]),
      .global_offset_1(pool_global_offset[1]),
      .global_offset_2(pool_global_offset[2]),
      .work_dim(pool_work_dim),
      .has_a_lsu_active(pool_cra_lsu_active),
      .has_a_write_pending(pool_cra_pending_write),
      .valid_in(pool_cra_valid_in),
      .global_size_0(pool_global_size[0]),
      .global_size_1(pool_global_size[1]),
      .global_size_2(pool_global_size[2]),
      .num_groups_0(pool_num_groups[0]),
      .num_groups_1(pool_num_groups[1]),
      .num_groups_2(pool_num_groups[2]),
      .local_size_0(pool_local_size[0]),
      .local_size_1(pool_local_size[1]),
      .local_size_2(pool_local_size[2]),
      .workgroup_size(pool_wg_size),
      .kernel_arguments(pool_kernel_arguments),
      .cra_irq(cra_irq_pool),
      // AVS avs_cra
      .avs_cra_enable(avs_pool_cra_enable),
      .avs_cra_read(avs_pool_cra_read),
      .avs_cra_write(avs_pool_cra_write),
      .avs_cra_address(avs_pool_cra_address),
      .avs_cra_writedata(avs_pool_cra_writedata),
      .avs_cra_byteenable(avs_pool_cra_byteenable),
      .avs_cra_readdata(avs_pool_cra_readdata),
      .avs_cra_readdatavalid(avs_pool_cra_readdatavalid)
   );

   // INST pool_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   pool_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(pool_wg_disp_start_out),
      .valid_in(pool_wg_disp_valid_out[0]),
      .stall_out(pool_wg_disp_stall_in[0]),
      .stall_out_lookahead(pool_wg_disp_stall_in_lookahead[0]),
      .stall_in(pool_stall_out[0]),
      .valid_out(pool_valid_in[0]),
      .group_id_in(pool_wg_disp_group_id_out),
      .global_id_base_in(pool_wg_disp_global_id_base_out),
      .local_size(pool_local_size),
      .global_size(pool_global_size),
      .local_id(pool_local_id[0]),
      .global_id(pool_global_id[0]),
      .group_id(pool_group_id[0])
   );

   // INST pool_inst_0 of pool_top_wrapper_0
   pool_top_wrapper_0 pool_inst_0
   (
      .start(pool_start_kernel_copy[0]),
      .kernel_arguments(pool_kernel_arguments),
      .work_dim(pool_work_dim),
      .global_offset(pool_global_offset),
      .kernel_valid_out(pool_valid_out[0]),
      .has_a_write_pending(pool_pending_write[0]),
      .has_a_lsu_active(pool_lsu_active[0]),
      .global_id(pool_global_id[0]),
      .local_id(pool_local_id[0]),
      .group_id(pool_group_id[0]),
      .global_size(pool_global_size),
      .local_size(pool_local_size),
      .num_groups(pool_num_groups),
      .workgroup_size(pool_wg_size),
      .kernel_stall_out(pool_stall_out[0]),
      .kernel_valid_in(pool_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_pool3
      .avm_unnamed_pool3_enable(pool_0_avm_unnamed_pool3_enable),
      .avm_unnamed_pool3_read(pool_0_avm_unnamed_pool3_read),
      .avm_unnamed_pool3_write(pool_0_avm_unnamed_pool3_write),
      .avm_unnamed_pool3_burstcount(pool_0_avm_unnamed_pool3_burstcount),
      .avm_unnamed_pool3_address(pool_0_avm_unnamed_pool3_address),
      .avm_unnamed_pool3_writedata(pool_0_avm_unnamed_pool3_writedata),
      .avm_unnamed_pool3_byteenable(pool_0_avm_unnamed_pool3_byteenable),
      .avm_unnamed_pool3_waitrequest(pool_0_avm_unnamed_pool3_waitrequest),
      .avm_unnamed_pool3_readdata(pool_0_avm_unnamed_pool3_readdata),
      .avm_unnamed_pool3_readdatavalid(pool_0_avm_unnamed_pool3_readdatavalid),
      .avm_unnamed_pool3_writeack(pool_0_avm_unnamed_pool3_writeack),
      // AVM avm_unnamed_pool5
      .avm_unnamed_pool5_enable(pool_0_avm_unnamed_pool5_enable),
      .avm_unnamed_pool5_read(pool_0_avm_unnamed_pool5_read),
      .avm_unnamed_pool5_write(pool_0_avm_unnamed_pool5_write),
      .avm_unnamed_pool5_burstcount(pool_0_avm_unnamed_pool5_burstcount),
      .avm_unnamed_pool5_address(pool_0_avm_unnamed_pool5_address),
      .avm_unnamed_pool5_writedata(pool_0_avm_unnamed_pool5_writedata),
      .avm_unnamed_pool5_byteenable(pool_0_avm_unnamed_pool5_byteenable),
      .avm_unnamed_pool5_waitrequest(pool_0_avm_unnamed_pool5_waitrequest),
      .avm_unnamed_pool5_readdata(pool_0_avm_unnamed_pool5_readdata),
      .avm_unnamed_pool5_readdatavalid(pool_0_avm_unnamed_pool5_readdatavalid),
      .avm_unnamed_pool5_writeack(pool_0_avm_unnamed_pool5_writeack)
   );

   // INST pool_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   pool_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(pool_start_chain[0]),
      .start_kernel(pool_start_kernel_copy[0]),
      .start_finish_detector(pool_start_task_fd[0]),
      .start_finish_chain_element(pool_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE batchnorm_top_wrapper_0
/////////////////////////////////////////////////////////////////
module batchnorm_top_wrapper_0
(
   input logic start,
   input logic [479:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_unnamed_batchnorm0
   output logic avm_unnamed_batchnorm0_enable,
   output logic avm_unnamed_batchnorm0_read,
   output logic avm_unnamed_batchnorm0_write,
   output logic [4:0] avm_unnamed_batchnorm0_burstcount,
   output logic [29:0] avm_unnamed_batchnorm0_address,
   output logic [255:0] avm_unnamed_batchnorm0_writedata,
   output logic [31:0] avm_unnamed_batchnorm0_byteenable,
   input logic avm_unnamed_batchnorm0_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm0_readdata,
   input logic avm_unnamed_batchnorm0_readdatavalid,
   input logic avm_unnamed_batchnorm0_writeack,
   // AVM avm_unnamed_batchnorm1
   output logic avm_unnamed_batchnorm1_enable,
   output logic avm_unnamed_batchnorm1_read,
   output logic avm_unnamed_batchnorm1_write,
   output logic [4:0] avm_unnamed_batchnorm1_burstcount,
   output logic [29:0] avm_unnamed_batchnorm1_address,
   output logic [255:0] avm_unnamed_batchnorm1_writedata,
   output logic [31:0] avm_unnamed_batchnorm1_byteenable,
   input logic avm_unnamed_batchnorm1_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm1_readdata,
   input logic avm_unnamed_batchnorm1_readdatavalid,
   input logic avm_unnamed_batchnorm1_writeack,
   // AVM avm_unnamed_batchnorm2
   output logic avm_unnamed_batchnorm2_enable,
   output logic avm_unnamed_batchnorm2_read,
   output logic avm_unnamed_batchnorm2_write,
   output logic [4:0] avm_unnamed_batchnorm2_burstcount,
   output logic [29:0] avm_unnamed_batchnorm2_address,
   output logic [255:0] avm_unnamed_batchnorm2_writedata,
   output logic [31:0] avm_unnamed_batchnorm2_byteenable,
   input logic avm_unnamed_batchnorm2_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm2_readdata,
   input logic avm_unnamed_batchnorm2_readdatavalid,
   input logic avm_unnamed_batchnorm2_writeack,
   // AVM avm_unnamed_batchnorm3
   output logic avm_unnamed_batchnorm3_enable,
   output logic avm_unnamed_batchnorm3_read,
   output logic avm_unnamed_batchnorm3_write,
   output logic [4:0] avm_unnamed_batchnorm3_burstcount,
   output logic [29:0] avm_unnamed_batchnorm3_address,
   output logic [255:0] avm_unnamed_batchnorm3_writedata,
   output logic [31:0] avm_unnamed_batchnorm3_byteenable,
   input logic avm_unnamed_batchnorm3_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm3_readdata,
   input logic avm_unnamed_batchnorm3_readdatavalid,
   input logic avm_unnamed_batchnorm3_writeack,
   // AVM avm_unnamed_batchnorm4
   output logic avm_unnamed_batchnorm4_enable,
   output logic avm_unnamed_batchnorm4_read,
   output logic avm_unnamed_batchnorm4_write,
   output logic [4:0] avm_unnamed_batchnorm4_burstcount,
   output logic [29:0] avm_unnamed_batchnorm4_address,
   output logic [255:0] avm_unnamed_batchnorm4_writedata,
   output logic [31:0] avm_unnamed_batchnorm4_byteenable,
   input logic avm_unnamed_batchnorm4_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm4_readdata,
   input logic avm_unnamed_batchnorm4_readdatavalid,
   input logic avm_unnamed_batchnorm4_writeack,
   // AVM avm_unnamed_batchnorm5
   output logic avm_unnamed_batchnorm5_enable,
   output logic avm_unnamed_batchnorm5_read,
   output logic avm_unnamed_batchnorm5_write,
   output logic [4:0] avm_unnamed_batchnorm5_burstcount,
   output logic [29:0] avm_unnamed_batchnorm5_address,
   output logic [255:0] avm_unnamed_batchnorm5_writedata,
   output logic [31:0] avm_unnamed_batchnorm5_byteenable,
   input logic avm_unnamed_batchnorm5_waitrequest,
   input logic [255:0] avm_unnamed_batchnorm5_readdata,
   input logic avm_unnamed_batchnorm5_readdatavalid,
   input logic avm_unnamed_batchnorm5_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of batchnorm_function_wrapper
   batchnorm_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_batchnorm0
      .avm_unnamed_batchnorm0_enable(avm_unnamed_batchnorm0_enable),
      .avm_unnamed_batchnorm0_read(avm_unnamed_batchnorm0_read),
      .avm_unnamed_batchnorm0_write(avm_unnamed_batchnorm0_write),
      .avm_unnamed_batchnorm0_burstcount(avm_unnamed_batchnorm0_burstcount),
      .avm_unnamed_batchnorm0_address(avm_unnamed_batchnorm0_address),
      .avm_unnamed_batchnorm0_writedata(avm_unnamed_batchnorm0_writedata),
      .avm_unnamed_batchnorm0_byteenable(avm_unnamed_batchnorm0_byteenable),
      .avm_unnamed_batchnorm0_waitrequest(avm_unnamed_batchnorm0_waitrequest),
      .avm_unnamed_batchnorm0_readdata(avm_unnamed_batchnorm0_readdata),
      .avm_unnamed_batchnorm0_readdatavalid(avm_unnamed_batchnorm0_readdatavalid),
      .avm_unnamed_batchnorm0_writeack(avm_unnamed_batchnorm0_writeack),
      // AVM avm_unnamed_batchnorm1
      .avm_unnamed_batchnorm1_enable(avm_unnamed_batchnorm1_enable),
      .avm_unnamed_batchnorm1_read(avm_unnamed_batchnorm1_read),
      .avm_unnamed_batchnorm1_write(avm_unnamed_batchnorm1_write),
      .avm_unnamed_batchnorm1_burstcount(avm_unnamed_batchnorm1_burstcount),
      .avm_unnamed_batchnorm1_address(avm_unnamed_batchnorm1_address),
      .avm_unnamed_batchnorm1_writedata(avm_unnamed_batchnorm1_writedata),
      .avm_unnamed_batchnorm1_byteenable(avm_unnamed_batchnorm1_byteenable),
      .avm_unnamed_batchnorm1_waitrequest(avm_unnamed_batchnorm1_waitrequest),
      .avm_unnamed_batchnorm1_readdata(avm_unnamed_batchnorm1_readdata),
      .avm_unnamed_batchnorm1_readdatavalid(avm_unnamed_batchnorm1_readdatavalid),
      .avm_unnamed_batchnorm1_writeack(avm_unnamed_batchnorm1_writeack),
      // AVM avm_unnamed_batchnorm2
      .avm_unnamed_batchnorm2_enable(avm_unnamed_batchnorm2_enable),
      .avm_unnamed_batchnorm2_read(avm_unnamed_batchnorm2_read),
      .avm_unnamed_batchnorm2_write(avm_unnamed_batchnorm2_write),
      .avm_unnamed_batchnorm2_burstcount(avm_unnamed_batchnorm2_burstcount),
      .avm_unnamed_batchnorm2_address(avm_unnamed_batchnorm2_address),
      .avm_unnamed_batchnorm2_writedata(avm_unnamed_batchnorm2_writedata),
      .avm_unnamed_batchnorm2_byteenable(avm_unnamed_batchnorm2_byteenable),
      .avm_unnamed_batchnorm2_waitrequest(avm_unnamed_batchnorm2_waitrequest),
      .avm_unnamed_batchnorm2_readdata(avm_unnamed_batchnorm2_readdata),
      .avm_unnamed_batchnorm2_readdatavalid(avm_unnamed_batchnorm2_readdatavalid),
      .avm_unnamed_batchnorm2_writeack(avm_unnamed_batchnorm2_writeack),
      // AVM avm_unnamed_batchnorm3
      .avm_unnamed_batchnorm3_enable(avm_unnamed_batchnorm3_enable),
      .avm_unnamed_batchnorm3_read(avm_unnamed_batchnorm3_read),
      .avm_unnamed_batchnorm3_write(avm_unnamed_batchnorm3_write),
      .avm_unnamed_batchnorm3_burstcount(avm_unnamed_batchnorm3_burstcount),
      .avm_unnamed_batchnorm3_address(avm_unnamed_batchnorm3_address),
      .avm_unnamed_batchnorm3_writedata(avm_unnamed_batchnorm3_writedata),
      .avm_unnamed_batchnorm3_byteenable(avm_unnamed_batchnorm3_byteenable),
      .avm_unnamed_batchnorm3_waitrequest(avm_unnamed_batchnorm3_waitrequest),
      .avm_unnamed_batchnorm3_readdata(avm_unnamed_batchnorm3_readdata),
      .avm_unnamed_batchnorm3_readdatavalid(avm_unnamed_batchnorm3_readdatavalid),
      .avm_unnamed_batchnorm3_writeack(avm_unnamed_batchnorm3_writeack),
      // AVM avm_unnamed_batchnorm4
      .avm_unnamed_batchnorm4_enable(avm_unnamed_batchnorm4_enable),
      .avm_unnamed_batchnorm4_read(avm_unnamed_batchnorm4_read),
      .avm_unnamed_batchnorm4_write(avm_unnamed_batchnorm4_write),
      .avm_unnamed_batchnorm4_burstcount(avm_unnamed_batchnorm4_burstcount),
      .avm_unnamed_batchnorm4_address(avm_unnamed_batchnorm4_address),
      .avm_unnamed_batchnorm4_writedata(avm_unnamed_batchnorm4_writedata),
      .avm_unnamed_batchnorm4_byteenable(avm_unnamed_batchnorm4_byteenable),
      .avm_unnamed_batchnorm4_waitrequest(avm_unnamed_batchnorm4_waitrequest),
      .avm_unnamed_batchnorm4_readdata(avm_unnamed_batchnorm4_readdata),
      .avm_unnamed_batchnorm4_readdatavalid(avm_unnamed_batchnorm4_readdatavalid),
      .avm_unnamed_batchnorm4_writeack(avm_unnamed_batchnorm4_writeack),
      // AVM avm_unnamed_batchnorm5
      .avm_unnamed_batchnorm5_enable(avm_unnamed_batchnorm5_enable),
      .avm_unnamed_batchnorm5_read(avm_unnamed_batchnorm5_read),
      .avm_unnamed_batchnorm5_write(avm_unnamed_batchnorm5_write),
      .avm_unnamed_batchnorm5_burstcount(avm_unnamed_batchnorm5_burstcount),
      .avm_unnamed_batchnorm5_address(avm_unnamed_batchnorm5_address),
      .avm_unnamed_batchnorm5_writedata(avm_unnamed_batchnorm5_writedata),
      .avm_unnamed_batchnorm5_byteenable(avm_unnamed_batchnorm5_byteenable),
      .avm_unnamed_batchnorm5_waitrequest(avm_unnamed_batchnorm5_waitrequest),
      .avm_unnamed_batchnorm5_readdata(avm_unnamed_batchnorm5_readdata),
      .avm_unnamed_batchnorm5_readdatavalid(avm_unnamed_batchnorm5_readdatavalid),
      .avm_unnamed_batchnorm5_writeack(avm_unnamed_batchnorm5_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv_top_wrapper_0
/////////////////////////////////////////////////////////////////
module conv_top_wrapper_0
(
   input logic start,
   input logic [447:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_unnamed_conv0
   output logic avm_unnamed_conv0_enable,
   output logic avm_unnamed_conv0_read,
   output logic avm_unnamed_conv0_write,
   output logic [4:0] avm_unnamed_conv0_burstcount,
   output logic [29:0] avm_unnamed_conv0_address,
   output logic [255:0] avm_unnamed_conv0_writedata,
   output logic [31:0] avm_unnamed_conv0_byteenable,
   input logic avm_unnamed_conv0_waitrequest,
   input logic [255:0] avm_unnamed_conv0_readdata,
   input logic avm_unnamed_conv0_readdatavalid,
   input logic avm_unnamed_conv0_writeack,
   // AVM avm_unnamed_conv1
   output logic avm_unnamed_conv1_enable,
   output logic avm_unnamed_conv1_read,
   output logic avm_unnamed_conv1_write,
   output logic [4:0] avm_unnamed_conv1_burstcount,
   output logic [29:0] avm_unnamed_conv1_address,
   output logic [255:0] avm_unnamed_conv1_writedata,
   output logic [31:0] avm_unnamed_conv1_byteenable,
   input logic avm_unnamed_conv1_waitrequest,
   input logic [255:0] avm_unnamed_conv1_readdata,
   input logic avm_unnamed_conv1_readdatavalid,
   input logic avm_unnamed_conv1_writeack,
   // AVM avm_unnamed_conv7
   output logic avm_unnamed_conv7_enable,
   output logic avm_unnamed_conv7_read,
   output logic avm_unnamed_conv7_write,
   output logic [4:0] avm_unnamed_conv7_burstcount,
   output logic [29:0] avm_unnamed_conv7_address,
   output logic [255:0] avm_unnamed_conv7_writedata,
   output logic [31:0] avm_unnamed_conv7_byteenable,
   input logic avm_unnamed_conv7_waitrequest,
   input logic [255:0] avm_unnamed_conv7_readdata,
   input logic avm_unnamed_conv7_readdatavalid,
   input logic avm_unnamed_conv7_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   logic lmem_invalid_single_bit;
   logic [1:0] lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][2];
   logic local_avm_aspace5_read [1][2];
   logic local_avm_aspace5_write [1][2];
   logic local_avm_aspace5_burstcount [1][2];
   logic [31:0] local_avm_aspace5_address [1][2];
   logic [255:0] local_avm_aspace5_writedata [1][2];
   logic [31:0] local_avm_aspace5_byteenable [1][2];
   logic local_avm_aspace5_waitrequest [1][2];
   logic [255:0] local_avm_aspace5_readdata [1][2];
   logic local_avm_aspace5_readdatavalid [1][2];
   logic local_avm_aspace5_writeack [1][2];
   logic local_avm_aspace6_enable [1][2];
   logic local_avm_aspace6_read [1][2];
   logic local_avm_aspace6_write [1][2];
   logic local_avm_aspace6_burstcount [1][2];
   logic [31:0] local_avm_aspace6_address [1][2];
   logic [255:0] local_avm_aspace6_writedata [1][2];
   logic [31:0] local_avm_aspace6_byteenable [1][2];
   logic local_avm_aspace6_waitrequest [1][2];
   logic [255:0] local_avm_aspace6_readdata [1][2];
   logic local_avm_aspace6_readdatavalid [1][2];
   logic local_avm_aspace6_writeack [1][2];

   // INST kernel of conv_function_wrapper
   conv_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_conv0
      .avm_unnamed_conv0_enable(avm_unnamed_conv0_enable),
      .avm_unnamed_conv0_read(avm_unnamed_conv0_read),
      .avm_unnamed_conv0_write(avm_unnamed_conv0_write),
      .avm_unnamed_conv0_burstcount(avm_unnamed_conv0_burstcount),
      .avm_unnamed_conv0_address(avm_unnamed_conv0_address),
      .avm_unnamed_conv0_writedata(avm_unnamed_conv0_writedata),
      .avm_unnamed_conv0_byteenable(avm_unnamed_conv0_byteenable),
      .avm_unnamed_conv0_waitrequest(avm_unnamed_conv0_waitrequest),
      .avm_unnamed_conv0_readdata(avm_unnamed_conv0_readdata),
      .avm_unnamed_conv0_readdatavalid(avm_unnamed_conv0_readdatavalid),
      .avm_unnamed_conv0_writeack(avm_unnamed_conv0_writeack),
      // AVM avm_unnamed_conv1
      .avm_unnamed_conv1_enable(avm_unnamed_conv1_enable),
      .avm_unnamed_conv1_read(avm_unnamed_conv1_read),
      .avm_unnamed_conv1_write(avm_unnamed_conv1_write),
      .avm_unnamed_conv1_burstcount(avm_unnamed_conv1_burstcount),
      .avm_unnamed_conv1_address(avm_unnamed_conv1_address),
      .avm_unnamed_conv1_writedata(avm_unnamed_conv1_writedata),
      .avm_unnamed_conv1_byteenable(avm_unnamed_conv1_byteenable),
      .avm_unnamed_conv1_waitrequest(avm_unnamed_conv1_waitrequest),
      .avm_unnamed_conv1_readdata(avm_unnamed_conv1_readdata),
      .avm_unnamed_conv1_readdatavalid(avm_unnamed_conv1_readdatavalid),
      .avm_unnamed_conv1_writeack(avm_unnamed_conv1_writeack),
      // AVM avm_unnamed_conv7
      .avm_unnamed_conv7_enable(avm_unnamed_conv7_enable),
      .avm_unnamed_conv7_read(avm_unnamed_conv7_read),
      .avm_unnamed_conv7_write(avm_unnamed_conv7_write),
      .avm_unnamed_conv7_burstcount(avm_unnamed_conv7_burstcount),
      .avm_unnamed_conv7_address(avm_unnamed_conv7_address),
      .avm_unnamed_conv7_writedata(avm_unnamed_conv7_writedata),
      .avm_unnamed_conv7_byteenable(avm_unnamed_conv7_byteenable),
      .avm_unnamed_conv7_waitrequest(avm_unnamed_conv7_waitrequest),
      .avm_unnamed_conv7_readdata(avm_unnamed_conv7_readdata),
      .avm_unnamed_conv7_readdatavalid(avm_unnamed_conv7_readdatavalid),
      .avm_unnamed_conv7_writeack(avm_unnamed_conv7_writeack),
      // AVM avm_memcoalesce_null_load_0
      .avm_memcoalesce_null_load_0_enable(local_avm_aspace5_enable[0][0]),
      .avm_memcoalesce_null_load_0_read(local_avm_aspace5_read[0][0]),
      .avm_memcoalesce_null_load_0_write(local_avm_aspace5_write[0][0]),
      .avm_memcoalesce_null_load_0_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_memcoalesce_null_load_0_address(local_avm_aspace5_address[0][0]),
      .avm_memcoalesce_null_load_0_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_memcoalesce_null_load_0_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_memcoalesce_null_load_0_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_memcoalesce_null_load_0_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_memcoalesce_null_load_0_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_memcoalesce_null_load_0_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_memdep
      .avm_memdep_enable(local_avm_aspace5_enable[0][1]),
      .avm_memdep_read(local_avm_aspace5_read[0][1]),
      .avm_memdep_write(local_avm_aspace5_write[0][1]),
      .avm_memdep_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_memdep_address(local_avm_aspace5_address[0][1]),
      .avm_memdep_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_memdep_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_memdep_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_memdep_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_memdep_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_memdep_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_memcoalesce_null_load_02
      .avm_memcoalesce_null_load_02_enable(local_avm_aspace6_enable[0][0]),
      .avm_memcoalesce_null_load_02_read(local_avm_aspace6_read[0][0]),
      .avm_memcoalesce_null_load_02_write(local_avm_aspace6_write[0][0]),
      .avm_memcoalesce_null_load_02_burstcount(local_avm_aspace6_burstcount[0][0]),
      .avm_memcoalesce_null_load_02_address(local_avm_aspace6_address[0][0]),
      .avm_memcoalesce_null_load_02_writedata(local_avm_aspace6_writedata[0][0]),
      .avm_memcoalesce_null_load_02_byteenable(local_avm_aspace6_byteenable[0][0]),
      .avm_memcoalesce_null_load_02_waitrequest(local_avm_aspace6_waitrequest[0][0]),
      .avm_memcoalesce_null_load_02_readdata(local_avm_aspace6_readdata[0][0]),
      .avm_memcoalesce_null_load_02_readdatavalid(local_avm_aspace6_readdatavalid[0][0]),
      .avm_memcoalesce_null_load_02_writeack(local_avm_aspace6_writeack[0][0]),
      // AVM avm_memdep_19
      .avm_memdep_19_enable(local_avm_aspace6_enable[0][1]),
      .avm_memdep_19_read(local_avm_aspace6_read[0][1]),
      .avm_memdep_19_write(local_avm_aspace6_write[0][1]),
      .avm_memdep_19_burstcount(local_avm_aspace6_burstcount[0][1]),
      .avm_memdep_19_address(local_avm_aspace6_address[0][1]),
      .avm_memdep_19_writedata(local_avm_aspace6_writedata[0][1]),
      .avm_memdep_19_byteenable(local_avm_aspace6_byteenable[0][1]),
      .avm_memdep_19_waitrequest(local_avm_aspace6_waitrequest[0][1]),
      .avm_memdep_19_readdata(local_avm_aspace6_readdata[0][1]),
      .avm_memdep_19_readdatavalid(local_avm_aspace6_readdatavalid[0][1]),
      .avm_memdep_19_writeack(local_avm_aspace6_writeack[0][1])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [255:0] local_icm_arb_writedata [1][2];
      logic [31:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [255:0] local_icm_rrp_data [1][2];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(256),
               .WRITEDATA_W(256),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(32)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [4:0] port_address [1:2];
            logic [255:0] port_writedata [1:2];
            logic [31:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [255:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(24),
               .WIDTH(256),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [4:0] b_arb_address [1];
            logic [255:0] b_arb_writedata [1];
            logic [31:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [255:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(256),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(32),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [255:0] icm_in_arb_writedata [1];
            logic [31:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [255:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [255:0] icm_out_arb_writedata;
            logic [31:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [255:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of darknet_system_interconnect_0
            darknet_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [255:0] icm_in_arb_writedata [1];
            logic [31:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [255:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [255:0] icm_out_arb_writedata;
            logic [31:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [255:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of darknet_system_interconnect_1
            darknet_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace6
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [255:0] local_icm_arb_writedata [1][2];
      logic [31:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [255:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(256),
               .WRITEDATA_W(256),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(32)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace6_enable[__j][__k]),
               .avm_read(local_avm_aspace6_read[__j][__k]),
               .avm_write(local_avm_aspace6_write[__j][__k]),
               .avm_burstcount(local_avm_aspace6_burstcount[__j][__k]),
               .avm_address(local_avm_aspace6_address[__j][__k]),
               .avm_writedata(local_avm_aspace6_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace6_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace6_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace6_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace6_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace6_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [4:0] port_address [1:2];
            logic [255:0] port_writedata [1:2];
            logic [31:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [255:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(24),
               .WIDTH(256),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [4:0] b_arb_address [1];
            logic [255:0] b_arb_writedata [1];
            logic [31:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [255:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(256),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(32),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [255:0] icm_in_arb_writedata [1];
            logic [31:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [255:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [255:0] icm_out_arb_writedata;
            logic [31:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [255:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of darknet_system_interconnect_0
            darknet_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [255:0] icm_in_arb_writedata [1];
            logic [31:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [255:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [255:0] icm_out_arb_writedata;
            logic [31:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [255:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of darknet_system_interconnect_1
            darknet_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv1x1_top_wrapper_0
/////////////////////////////////////////////////////////////////
module conv1x1_top_wrapper_0
(
   input logic start,
   input logic [351:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_unnamed_conv1x11
   output logic avm_unnamed_conv1x11_enable,
   output logic avm_unnamed_conv1x11_read,
   output logic avm_unnamed_conv1x11_write,
   output logic [4:0] avm_unnamed_conv1x11_burstcount,
   output logic [29:0] avm_unnamed_conv1x11_address,
   output logic [255:0] avm_unnamed_conv1x11_writedata,
   output logic [31:0] avm_unnamed_conv1x11_byteenable,
   input logic avm_unnamed_conv1x11_waitrequest,
   input logic [255:0] avm_unnamed_conv1x11_readdata,
   input logic avm_unnamed_conv1x11_readdatavalid,
   input logic avm_unnamed_conv1x11_writeack,
   // AVM avm_unnamed_conv1x110
   output logic avm_unnamed_conv1x110_enable,
   output logic avm_unnamed_conv1x110_read,
   output logic avm_unnamed_conv1x110_write,
   output logic [4:0] avm_unnamed_conv1x110_burstcount,
   output logic [29:0] avm_unnamed_conv1x110_address,
   output logic [255:0] avm_unnamed_conv1x110_writedata,
   output logic [31:0] avm_unnamed_conv1x110_byteenable,
   input logic avm_unnamed_conv1x110_waitrequest,
   input logic [255:0] avm_unnamed_conv1x110_readdata,
   input logic avm_unnamed_conv1x110_readdatavalid,
   input logic avm_unnamed_conv1x110_writeack,
   // AVM avm_unnamed_conv1x111
   output logic avm_unnamed_conv1x111_enable,
   output logic avm_unnamed_conv1x111_read,
   output logic avm_unnamed_conv1x111_write,
   output logic [4:0] avm_unnamed_conv1x111_burstcount,
   output logic [29:0] avm_unnamed_conv1x111_address,
   output logic [255:0] avm_unnamed_conv1x111_writedata,
   output logic [31:0] avm_unnamed_conv1x111_byteenable,
   input logic avm_unnamed_conv1x111_waitrequest,
   input logic [255:0] avm_unnamed_conv1x111_readdata,
   input logic avm_unnamed_conv1x111_readdatavalid,
   input logic avm_unnamed_conv1x111_writeack,
   // AVM avm_unnamed_conv1x113
   output logic avm_unnamed_conv1x113_enable,
   output logic avm_unnamed_conv1x113_read,
   output logic avm_unnamed_conv1x113_write,
   output logic [4:0] avm_unnamed_conv1x113_burstcount,
   output logic [29:0] avm_unnamed_conv1x113_address,
   output logic [255:0] avm_unnamed_conv1x113_writedata,
   output logic [31:0] avm_unnamed_conv1x113_byteenable,
   input logic avm_unnamed_conv1x113_waitrequest,
   input logic [255:0] avm_unnamed_conv1x113_readdata,
   input logic avm_unnamed_conv1x113_readdatavalid,
   input logic avm_unnamed_conv1x113_writeack,
   // AVM avm_unnamed_conv1x114
   output logic avm_unnamed_conv1x114_enable,
   output logic avm_unnamed_conv1x114_read,
   output logic avm_unnamed_conv1x114_write,
   output logic [4:0] avm_unnamed_conv1x114_burstcount,
   output logic [29:0] avm_unnamed_conv1x114_address,
   output logic [255:0] avm_unnamed_conv1x114_writedata,
   output logic [31:0] avm_unnamed_conv1x114_byteenable,
   input logic avm_unnamed_conv1x114_waitrequest,
   input logic [255:0] avm_unnamed_conv1x114_readdata,
   input logic avm_unnamed_conv1x114_readdatavalid,
   input logic avm_unnamed_conv1x114_writeack,
   // AVM avm_unnamed_conv1x115
   output logic avm_unnamed_conv1x115_enable,
   output logic avm_unnamed_conv1x115_read,
   output logic avm_unnamed_conv1x115_write,
   output logic [4:0] avm_unnamed_conv1x115_burstcount,
   output logic [29:0] avm_unnamed_conv1x115_address,
   output logic [255:0] avm_unnamed_conv1x115_writedata,
   output logic [31:0] avm_unnamed_conv1x115_byteenable,
   input logic avm_unnamed_conv1x115_waitrequest,
   input logic [255:0] avm_unnamed_conv1x115_readdata,
   input logic avm_unnamed_conv1x115_readdatavalid,
   input logic avm_unnamed_conv1x115_writeack,
   // AVM avm_unnamed_conv1x12
   output logic avm_unnamed_conv1x12_enable,
   output logic avm_unnamed_conv1x12_read,
   output logic avm_unnamed_conv1x12_write,
   output logic [4:0] avm_unnamed_conv1x12_burstcount,
   output logic [29:0] avm_unnamed_conv1x12_address,
   output logic [255:0] avm_unnamed_conv1x12_writedata,
   output logic [31:0] avm_unnamed_conv1x12_byteenable,
   input logic avm_unnamed_conv1x12_waitrequest,
   input logic [255:0] avm_unnamed_conv1x12_readdata,
   input logic avm_unnamed_conv1x12_readdatavalid,
   input logic avm_unnamed_conv1x12_writeack,
   // AVM avm_unnamed_conv1x13
   output logic avm_unnamed_conv1x13_enable,
   output logic avm_unnamed_conv1x13_read,
   output logic avm_unnamed_conv1x13_write,
   output logic [4:0] avm_unnamed_conv1x13_burstcount,
   output logic [29:0] avm_unnamed_conv1x13_address,
   output logic [255:0] avm_unnamed_conv1x13_writedata,
   output logic [31:0] avm_unnamed_conv1x13_byteenable,
   input logic avm_unnamed_conv1x13_waitrequest,
   input logic [255:0] avm_unnamed_conv1x13_readdata,
   input logic avm_unnamed_conv1x13_readdatavalid,
   input logic avm_unnamed_conv1x13_writeack,
   // AVM avm_unnamed_conv1x15
   output logic avm_unnamed_conv1x15_enable,
   output logic avm_unnamed_conv1x15_read,
   output logic avm_unnamed_conv1x15_write,
   output logic [4:0] avm_unnamed_conv1x15_burstcount,
   output logic [29:0] avm_unnamed_conv1x15_address,
   output logic [255:0] avm_unnamed_conv1x15_writedata,
   output logic [31:0] avm_unnamed_conv1x15_byteenable,
   input logic avm_unnamed_conv1x15_waitrequest,
   input logic [255:0] avm_unnamed_conv1x15_readdata,
   input logic avm_unnamed_conv1x15_readdatavalid,
   input logic avm_unnamed_conv1x15_writeack,
   // AVM avm_unnamed_conv1x16
   output logic avm_unnamed_conv1x16_enable,
   output logic avm_unnamed_conv1x16_read,
   output logic avm_unnamed_conv1x16_write,
   output logic [4:0] avm_unnamed_conv1x16_burstcount,
   output logic [29:0] avm_unnamed_conv1x16_address,
   output logic [255:0] avm_unnamed_conv1x16_writedata,
   output logic [31:0] avm_unnamed_conv1x16_byteenable,
   input logic avm_unnamed_conv1x16_waitrequest,
   input logic [255:0] avm_unnamed_conv1x16_readdata,
   input logic avm_unnamed_conv1x16_readdatavalid,
   input logic avm_unnamed_conv1x16_writeack,
   // AVM avm_unnamed_conv1x17
   output logic avm_unnamed_conv1x17_enable,
   output logic avm_unnamed_conv1x17_read,
   output logic avm_unnamed_conv1x17_write,
   output logic [4:0] avm_unnamed_conv1x17_burstcount,
   output logic [29:0] avm_unnamed_conv1x17_address,
   output logic [255:0] avm_unnamed_conv1x17_writedata,
   output logic [31:0] avm_unnamed_conv1x17_byteenable,
   input logic avm_unnamed_conv1x17_waitrequest,
   input logic [255:0] avm_unnamed_conv1x17_readdata,
   input logic avm_unnamed_conv1x17_readdatavalid,
   input logic avm_unnamed_conv1x17_writeack,
   // AVM avm_unnamed_conv1x19
   output logic avm_unnamed_conv1x19_enable,
   output logic avm_unnamed_conv1x19_read,
   output logic avm_unnamed_conv1x19_write,
   output logic [4:0] avm_unnamed_conv1x19_burstcount,
   output logic [29:0] avm_unnamed_conv1x19_address,
   output logic [255:0] avm_unnamed_conv1x19_writedata,
   output logic [31:0] avm_unnamed_conv1x19_byteenable,
   input logic avm_unnamed_conv1x19_waitrequest,
   input logic [255:0] avm_unnamed_conv1x19_readdata,
   input logic avm_unnamed_conv1x19_readdatavalid,
   input logic avm_unnamed_conv1x19_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of conv1x1_function_wrapper
   conv1x1_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_conv1x11
      .avm_unnamed_conv1x11_enable(avm_unnamed_conv1x11_enable),
      .avm_unnamed_conv1x11_read(avm_unnamed_conv1x11_read),
      .avm_unnamed_conv1x11_write(avm_unnamed_conv1x11_write),
      .avm_unnamed_conv1x11_burstcount(avm_unnamed_conv1x11_burstcount),
      .avm_unnamed_conv1x11_address(avm_unnamed_conv1x11_address),
      .avm_unnamed_conv1x11_writedata(avm_unnamed_conv1x11_writedata),
      .avm_unnamed_conv1x11_byteenable(avm_unnamed_conv1x11_byteenable),
      .avm_unnamed_conv1x11_waitrequest(avm_unnamed_conv1x11_waitrequest),
      .avm_unnamed_conv1x11_readdata(avm_unnamed_conv1x11_readdata),
      .avm_unnamed_conv1x11_readdatavalid(avm_unnamed_conv1x11_readdatavalid),
      .avm_unnamed_conv1x11_writeack(avm_unnamed_conv1x11_writeack),
      // AVM avm_unnamed_conv1x110
      .avm_unnamed_conv1x110_enable(avm_unnamed_conv1x110_enable),
      .avm_unnamed_conv1x110_read(avm_unnamed_conv1x110_read),
      .avm_unnamed_conv1x110_write(avm_unnamed_conv1x110_write),
      .avm_unnamed_conv1x110_burstcount(avm_unnamed_conv1x110_burstcount),
      .avm_unnamed_conv1x110_address(avm_unnamed_conv1x110_address),
      .avm_unnamed_conv1x110_writedata(avm_unnamed_conv1x110_writedata),
      .avm_unnamed_conv1x110_byteenable(avm_unnamed_conv1x110_byteenable),
      .avm_unnamed_conv1x110_waitrequest(avm_unnamed_conv1x110_waitrequest),
      .avm_unnamed_conv1x110_readdata(avm_unnamed_conv1x110_readdata),
      .avm_unnamed_conv1x110_readdatavalid(avm_unnamed_conv1x110_readdatavalid),
      .avm_unnamed_conv1x110_writeack(avm_unnamed_conv1x110_writeack),
      // AVM avm_unnamed_conv1x111
      .avm_unnamed_conv1x111_enable(avm_unnamed_conv1x111_enable),
      .avm_unnamed_conv1x111_read(avm_unnamed_conv1x111_read),
      .avm_unnamed_conv1x111_write(avm_unnamed_conv1x111_write),
      .avm_unnamed_conv1x111_burstcount(avm_unnamed_conv1x111_burstcount),
      .avm_unnamed_conv1x111_address(avm_unnamed_conv1x111_address),
      .avm_unnamed_conv1x111_writedata(avm_unnamed_conv1x111_writedata),
      .avm_unnamed_conv1x111_byteenable(avm_unnamed_conv1x111_byteenable),
      .avm_unnamed_conv1x111_waitrequest(avm_unnamed_conv1x111_waitrequest),
      .avm_unnamed_conv1x111_readdata(avm_unnamed_conv1x111_readdata),
      .avm_unnamed_conv1x111_readdatavalid(avm_unnamed_conv1x111_readdatavalid),
      .avm_unnamed_conv1x111_writeack(avm_unnamed_conv1x111_writeack),
      // AVM avm_unnamed_conv1x113
      .avm_unnamed_conv1x113_enable(avm_unnamed_conv1x113_enable),
      .avm_unnamed_conv1x113_read(avm_unnamed_conv1x113_read),
      .avm_unnamed_conv1x113_write(avm_unnamed_conv1x113_write),
      .avm_unnamed_conv1x113_burstcount(avm_unnamed_conv1x113_burstcount),
      .avm_unnamed_conv1x113_address(avm_unnamed_conv1x113_address),
      .avm_unnamed_conv1x113_writedata(avm_unnamed_conv1x113_writedata),
      .avm_unnamed_conv1x113_byteenable(avm_unnamed_conv1x113_byteenable),
      .avm_unnamed_conv1x113_waitrequest(avm_unnamed_conv1x113_waitrequest),
      .avm_unnamed_conv1x113_readdata(avm_unnamed_conv1x113_readdata),
      .avm_unnamed_conv1x113_readdatavalid(avm_unnamed_conv1x113_readdatavalid),
      .avm_unnamed_conv1x113_writeack(avm_unnamed_conv1x113_writeack),
      // AVM avm_unnamed_conv1x114
      .avm_unnamed_conv1x114_enable(avm_unnamed_conv1x114_enable),
      .avm_unnamed_conv1x114_read(avm_unnamed_conv1x114_read),
      .avm_unnamed_conv1x114_write(avm_unnamed_conv1x114_write),
      .avm_unnamed_conv1x114_burstcount(avm_unnamed_conv1x114_burstcount),
      .avm_unnamed_conv1x114_address(avm_unnamed_conv1x114_address),
      .avm_unnamed_conv1x114_writedata(avm_unnamed_conv1x114_writedata),
      .avm_unnamed_conv1x114_byteenable(avm_unnamed_conv1x114_byteenable),
      .avm_unnamed_conv1x114_waitrequest(avm_unnamed_conv1x114_waitrequest),
      .avm_unnamed_conv1x114_readdata(avm_unnamed_conv1x114_readdata),
      .avm_unnamed_conv1x114_readdatavalid(avm_unnamed_conv1x114_readdatavalid),
      .avm_unnamed_conv1x114_writeack(avm_unnamed_conv1x114_writeack),
      // AVM avm_unnamed_conv1x115
      .avm_unnamed_conv1x115_enable(avm_unnamed_conv1x115_enable),
      .avm_unnamed_conv1x115_read(avm_unnamed_conv1x115_read),
      .avm_unnamed_conv1x115_write(avm_unnamed_conv1x115_write),
      .avm_unnamed_conv1x115_burstcount(avm_unnamed_conv1x115_burstcount),
      .avm_unnamed_conv1x115_address(avm_unnamed_conv1x115_address),
      .avm_unnamed_conv1x115_writedata(avm_unnamed_conv1x115_writedata),
      .avm_unnamed_conv1x115_byteenable(avm_unnamed_conv1x115_byteenable),
      .avm_unnamed_conv1x115_waitrequest(avm_unnamed_conv1x115_waitrequest),
      .avm_unnamed_conv1x115_readdata(avm_unnamed_conv1x115_readdata),
      .avm_unnamed_conv1x115_readdatavalid(avm_unnamed_conv1x115_readdatavalid),
      .avm_unnamed_conv1x115_writeack(avm_unnamed_conv1x115_writeack),
      // AVM avm_unnamed_conv1x12
      .avm_unnamed_conv1x12_enable(avm_unnamed_conv1x12_enable),
      .avm_unnamed_conv1x12_read(avm_unnamed_conv1x12_read),
      .avm_unnamed_conv1x12_write(avm_unnamed_conv1x12_write),
      .avm_unnamed_conv1x12_burstcount(avm_unnamed_conv1x12_burstcount),
      .avm_unnamed_conv1x12_address(avm_unnamed_conv1x12_address),
      .avm_unnamed_conv1x12_writedata(avm_unnamed_conv1x12_writedata),
      .avm_unnamed_conv1x12_byteenable(avm_unnamed_conv1x12_byteenable),
      .avm_unnamed_conv1x12_waitrequest(avm_unnamed_conv1x12_waitrequest),
      .avm_unnamed_conv1x12_readdata(avm_unnamed_conv1x12_readdata),
      .avm_unnamed_conv1x12_readdatavalid(avm_unnamed_conv1x12_readdatavalid),
      .avm_unnamed_conv1x12_writeack(avm_unnamed_conv1x12_writeack),
      // AVM avm_unnamed_conv1x13
      .avm_unnamed_conv1x13_enable(avm_unnamed_conv1x13_enable),
      .avm_unnamed_conv1x13_read(avm_unnamed_conv1x13_read),
      .avm_unnamed_conv1x13_write(avm_unnamed_conv1x13_write),
      .avm_unnamed_conv1x13_burstcount(avm_unnamed_conv1x13_burstcount),
      .avm_unnamed_conv1x13_address(avm_unnamed_conv1x13_address),
      .avm_unnamed_conv1x13_writedata(avm_unnamed_conv1x13_writedata),
      .avm_unnamed_conv1x13_byteenable(avm_unnamed_conv1x13_byteenable),
      .avm_unnamed_conv1x13_waitrequest(avm_unnamed_conv1x13_waitrequest),
      .avm_unnamed_conv1x13_readdata(avm_unnamed_conv1x13_readdata),
      .avm_unnamed_conv1x13_readdatavalid(avm_unnamed_conv1x13_readdatavalid),
      .avm_unnamed_conv1x13_writeack(avm_unnamed_conv1x13_writeack),
      // AVM avm_unnamed_conv1x15
      .avm_unnamed_conv1x15_enable(avm_unnamed_conv1x15_enable),
      .avm_unnamed_conv1x15_read(avm_unnamed_conv1x15_read),
      .avm_unnamed_conv1x15_write(avm_unnamed_conv1x15_write),
      .avm_unnamed_conv1x15_burstcount(avm_unnamed_conv1x15_burstcount),
      .avm_unnamed_conv1x15_address(avm_unnamed_conv1x15_address),
      .avm_unnamed_conv1x15_writedata(avm_unnamed_conv1x15_writedata),
      .avm_unnamed_conv1x15_byteenable(avm_unnamed_conv1x15_byteenable),
      .avm_unnamed_conv1x15_waitrequest(avm_unnamed_conv1x15_waitrequest),
      .avm_unnamed_conv1x15_readdata(avm_unnamed_conv1x15_readdata),
      .avm_unnamed_conv1x15_readdatavalid(avm_unnamed_conv1x15_readdatavalid),
      .avm_unnamed_conv1x15_writeack(avm_unnamed_conv1x15_writeack),
      // AVM avm_unnamed_conv1x16
      .avm_unnamed_conv1x16_enable(avm_unnamed_conv1x16_enable),
      .avm_unnamed_conv1x16_read(avm_unnamed_conv1x16_read),
      .avm_unnamed_conv1x16_write(avm_unnamed_conv1x16_write),
      .avm_unnamed_conv1x16_burstcount(avm_unnamed_conv1x16_burstcount),
      .avm_unnamed_conv1x16_address(avm_unnamed_conv1x16_address),
      .avm_unnamed_conv1x16_writedata(avm_unnamed_conv1x16_writedata),
      .avm_unnamed_conv1x16_byteenable(avm_unnamed_conv1x16_byteenable),
      .avm_unnamed_conv1x16_waitrequest(avm_unnamed_conv1x16_waitrequest),
      .avm_unnamed_conv1x16_readdata(avm_unnamed_conv1x16_readdata),
      .avm_unnamed_conv1x16_readdatavalid(avm_unnamed_conv1x16_readdatavalid),
      .avm_unnamed_conv1x16_writeack(avm_unnamed_conv1x16_writeack),
      // AVM avm_unnamed_conv1x17
      .avm_unnamed_conv1x17_enable(avm_unnamed_conv1x17_enable),
      .avm_unnamed_conv1x17_read(avm_unnamed_conv1x17_read),
      .avm_unnamed_conv1x17_write(avm_unnamed_conv1x17_write),
      .avm_unnamed_conv1x17_burstcount(avm_unnamed_conv1x17_burstcount),
      .avm_unnamed_conv1x17_address(avm_unnamed_conv1x17_address),
      .avm_unnamed_conv1x17_writedata(avm_unnamed_conv1x17_writedata),
      .avm_unnamed_conv1x17_byteenable(avm_unnamed_conv1x17_byteenable),
      .avm_unnamed_conv1x17_waitrequest(avm_unnamed_conv1x17_waitrequest),
      .avm_unnamed_conv1x17_readdata(avm_unnamed_conv1x17_readdata),
      .avm_unnamed_conv1x17_readdatavalid(avm_unnamed_conv1x17_readdatavalid),
      .avm_unnamed_conv1x17_writeack(avm_unnamed_conv1x17_writeack),
      // AVM avm_unnamed_conv1x19
      .avm_unnamed_conv1x19_enable(avm_unnamed_conv1x19_enable),
      .avm_unnamed_conv1x19_read(avm_unnamed_conv1x19_read),
      .avm_unnamed_conv1x19_write(avm_unnamed_conv1x19_write),
      .avm_unnamed_conv1x19_burstcount(avm_unnamed_conv1x19_burstcount),
      .avm_unnamed_conv1x19_address(avm_unnamed_conv1x19_address),
      .avm_unnamed_conv1x19_writedata(avm_unnamed_conv1x19_writedata),
      .avm_unnamed_conv1x19_byteenable(avm_unnamed_conv1x19_byteenable),
      .avm_unnamed_conv1x19_waitrequest(avm_unnamed_conv1x19_waitrequest),
      .avm_unnamed_conv1x19_readdata(avm_unnamed_conv1x19_readdata),
      .avm_unnamed_conv1x19_readdatavalid(avm_unnamed_conv1x19_readdatavalid),
      .avm_unnamed_conv1x19_writeack(avm_unnamed_conv1x19_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE pool_top_wrapper_0
/////////////////////////////////////////////////////////////////
module pool_top_wrapper_0
(
   input logic start,
   input logic [287:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_unnamed_pool3
   output logic avm_unnamed_pool3_enable,
   output logic avm_unnamed_pool3_read,
   output logic avm_unnamed_pool3_write,
   output logic [4:0] avm_unnamed_pool3_burstcount,
   output logic [29:0] avm_unnamed_pool3_address,
   output logic [255:0] avm_unnamed_pool3_writedata,
   output logic [31:0] avm_unnamed_pool3_byteenable,
   input logic avm_unnamed_pool3_waitrequest,
   input logic [255:0] avm_unnamed_pool3_readdata,
   input logic avm_unnamed_pool3_readdatavalid,
   input logic avm_unnamed_pool3_writeack,
   // AVM avm_unnamed_pool5
   output logic avm_unnamed_pool5_enable,
   output logic avm_unnamed_pool5_read,
   output logic avm_unnamed_pool5_write,
   output logic [4:0] avm_unnamed_pool5_burstcount,
   output logic [29:0] avm_unnamed_pool5_address,
   output logic [255:0] avm_unnamed_pool5_writedata,
   output logic [31:0] avm_unnamed_pool5_byteenable,
   input logic avm_unnamed_pool5_waitrequest,
   input logic [255:0] avm_unnamed_pool5_readdata,
   input logic avm_unnamed_pool5_readdatavalid,
   input logic avm_unnamed_pool5_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of pool_function_wrapper
   pool_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_pool3
      .avm_unnamed_pool3_enable(avm_unnamed_pool3_enable),
      .avm_unnamed_pool3_read(avm_unnamed_pool3_read),
      .avm_unnamed_pool3_write(avm_unnamed_pool3_write),
      .avm_unnamed_pool3_burstcount(avm_unnamed_pool3_burstcount),
      .avm_unnamed_pool3_address(avm_unnamed_pool3_address),
      .avm_unnamed_pool3_writedata(avm_unnamed_pool3_writedata),
      .avm_unnamed_pool3_byteenable(avm_unnamed_pool3_byteenable),
      .avm_unnamed_pool3_waitrequest(avm_unnamed_pool3_waitrequest),
      .avm_unnamed_pool3_readdata(avm_unnamed_pool3_readdata),
      .avm_unnamed_pool3_readdatavalid(avm_unnamed_pool3_readdatavalid),
      .avm_unnamed_pool3_writeack(avm_unnamed_pool3_writeack),
      // AVM avm_unnamed_pool5
      .avm_unnamed_pool5_enable(avm_unnamed_pool5_enable),
      .avm_unnamed_pool5_read(avm_unnamed_pool5_read),
      .avm_unnamed_pool5_write(avm_unnamed_pool5_write),
      .avm_unnamed_pool5_burstcount(avm_unnamed_pool5_burstcount),
      .avm_unnamed_pool5_address(avm_unnamed_pool5_address),
      .avm_unnamed_pool5_writedata(avm_unnamed_pool5_writedata),
      .avm_unnamed_pool5_byteenable(avm_unnamed_pool5_byteenable),
      .avm_unnamed_pool5_waitrequest(avm_unnamed_pool5_waitrequest),
      .avm_unnamed_pool5_readdata(avm_unnamed_pool5_readdata),
      .avm_unnamed_pool5_readdatavalid(avm_unnamed_pool5_readdatavalid),
      .avm_unnamed_pool5_writeack(avm_unnamed_pool5_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE darknet_system_interconnect_0
/////////////////////////////////////////////////////////////////
module darknet_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [255:0] m_arb_writedata [1],
   input logic [31:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [255:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [255:0] mout_arb_writedata,
   output logic [31:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [255:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(256),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(256),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE darknet_system_interconnect_1
/////////////////////////////////////////////////////////////////
module darknet_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [255:0] m_arb_writedata [1],
   input logic [31:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [255:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [255:0] mout_arb_writedata,
   output logic [31:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [255:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(256),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(32),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(256),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(32),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

